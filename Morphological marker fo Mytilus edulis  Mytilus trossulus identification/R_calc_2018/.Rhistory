morph:Subset + freq_MT:Subset, data = new_data4) #Модельная матрица для визуализации
# Ошибки в шкале логитов
new_data4$se_eta <- sqrt(diag(X %*% vcov(Model_4_final) %*% t(X)))
new_data4$lwr <- logit_back(new_data4$fit_eta - 1.96 * new_data4$se_eta)
new_data4$upr <- logit_back(new_data4$fit_eta + 1.96 * new_data4$se_eta)
Pl_mod4 <- ggplot(new_data4, aes(x = freq_MT)) +
geom_ribbon(aes(ymin = lwr, ymax = upr, group = morph), alpha = 0.1)  +
geom_line(aes(y = fit, color = morph), size=1, linetype = 2) +
geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1) +
scale_color_manual(values = c("blue", "red")) +
scale_fill_manual(values = c("blue", "red"))  +
xlim(0,1)  +
facet_wrap( ~ Subset)
pr_value_M <- myt2 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_T = sum(ind == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_E = sum(ind == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
pr_value_M$PMT_T <- with(pr_value_M, N_T_MT / N_T)
pr_value_M$PMT_E <- with(pr_value_M, N_E_MT / N_T)
pr_value_M$PME_E <- with(pr_value_M, N_E_ME / N_E)
pr_value_M$PME_T <- with(pr_value_M, N_T_ME / N_E)
Pl_mod4_with_initial_data <- Pl_mod4 + geom_segment(data = pr_value_M, aes(x = freq_MT, y = PME_E, xend = freq_MT, yend = PMT_T), color="darkgrey") +
geom_hline(data = pr_value_M, aes(yintercept=0.5), color="black") +
geom_point(data = pr_value_M, aes(y = PME_E, size= N_E), fill = "white", shape = 21) +
geom_point(data = pr_value_M, aes(y = PMT_T, size=N_T), fill = "black", shape = 21) +
labs(y =  "Proportions of correct species \n identification by morphotypes", x = "Proportion of M. trossulus", fill = "")+
ylim(0,1) +
xlim(0,1)
# +
#   theme(strip.background = element_blank(), strip.text = element_blank())
test_Model_4 <- myt3 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_T = sum(ind == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_E = sum(ind == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
test_Model_4$PMT_T <- with(test_Model_4, N_T_MT / N_T)
test_Model_4$PMT_E <- with(test_Model_4, N_E_MT / N_T)
test_Model_4$PME_E <- with(test_Model_4, N_E_ME / N_E)
test_Model_4$PME_T <- with(test_Model_4, N_T_ME / N_E)
Pl_mod4_with_initial_data <- Pl_mod4_with_initial_data + geom_point(data = test_Model_4, aes(y = PME_E, size= N_E), fill = "red", shape = 24) +
geom_point(data = test_Model_4, aes(y = PMT_T, size=N_T), fill = "blue", shape = 24)
# Model_5 ##############################
new_data5 <- myt2 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(Prop_T) ) %>% group_by(Subset) %>%  do(data.frame(Prop_T = seq(min(.$Prop_T), max(.$Prop_T), length.out = 10)))
predicted5 <- predict(Model_5_final, newdata = new_data5,  type="response", se.fit = T)
new_data5$fit <- predicted5$fit
new_data5$SE <- predicted5$se.fit
Pl_mod5 <- ggplot(new_data5, aes(x = Prop_T, y = fit)) + geom_line(linetype = 2, color = "red", size = 1) + facet_wrap(~Subset) + geom_ribbon(aes(ymin = fit - 1.96*SE, ymax = fit + 1.96*SE), alpha = 0.1) + xlim(0, 1) + ylim(0, 1) +  geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = Prop_T), size = 0.1) + geom_abline()
init_data_Model_5 <- myt2 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(morph == "T_m"),  freq_MT = mean(Sp == "M.trossulus"), N = n())
Pl_mod5_with_initial_data <- Pl_mod5 + geom_point(data = init_data_Model_5, aes( y = freq_MT, size = N, fill = freq_MT), shape = 21 ) + scale_fill_continuous(low = "white", high = "black") + labs(x = "Proportion of mussels with T-morphotype", y = "Proportion of M.trossulus \n")
test_Model_5 <- myt3 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(morph == "T_m"),  freq_MT = mean(Sp == "M.trossulus"), N = n())
Pl_mod5_with_initial_data <- Pl_mod5_with_initial_data + geom_point(data = test_Model_5, aes( y = freq_MT, size = N, fill = freq_MT), shape = 24, fill = "red" )
grid.arrange(Pl_mod1_with_initial_data ,
Pl_mod2_with_initial_data + theme(strip.text = element_blank()),
Pl_mod3_with_initial_data + theme(strip.text = element_blank()),
Pl_mod4_with_initial_data+ theme(strip.text = element_blank()) ,
ncol = 1)
# Анализ корреляции с размерами
# residuals(Model_2_final)
Model_2_final_diagn <- fortify(Model_2_final)
# sum(is.na(myt2$resid_siz))
resid_siz <- merge(myt2, Model_2_final_diagn)
resid_siz <- resid_siz[!is.na(resid_siz$siz), ]
# sum(is.na(resid_siz$size))
resid_cor <- resid_siz %>% group_by(Subset, pop) %>% summarise(cor = cor.test(.scresid, size, method = "pearson")$estimate, p = cor.test(.scresid, size, method = "pearson")$p.value)
# str((cor.test(resid_siz$.scresid, resid_siz$size, method = "pearson")))
resid_cor$p_adj <- p.adjust(resid_cor$p, method = "hochberg")
# sum(resid_cor$p_adj < 0.05, na.rm = T)
# kable(resid_cor[resid_cor$p_adj < 0.05, ])
# То же самое для модели 4
# residuals(Model_4_final)
Model_4_final_diagn <- fortify(Model_4_final)
# sum(is.na(myt2$resid_siz))
resid_siz2 <- merge(myt2, Model_4_final_diagn)
resid_siz2 <- resid_siz2[!is.na(resid_siz2$siz), ]
# sum(is.na(resid_siz2$size))
resid_cor2 <- resid_siz2 %>% group_by(Subset, pop) %>% summarise(cor = cor.test(.scresid, size, method = "pearson")$estimate, p = cor.test(.scresid, size, method = "pearson")$p.value)
# str((cor.test(resid_siz$.scresid, resid_siz$size, method = "pearson")))
resid_cor2$p_adj <- p.adjust(resid_cor2$p, method = "hochberg")
# kable(resid_cor2[resid_cor2$p_adj < 0.05, ])
candidat_data_1 <- myt2
candidat_data_1$Subset <- candidat_data_1$Subset
candidat_data_2 <- candidat_data_1
candidat_data_2$Subset <- ifelse(candidat_data_2$Subset == "W"| candidat_data_2$Subset == "BL", "WBL", "BH")
candidat_data_3 <- candidat_data_1
candidat_data_3$Subset <- ifelse(candidat_data_3$Subset == "W"| candidat_data_3$Subset == "BH", "WBH", "BL")
candidat_data_4 <- candidat_data_1
candidat_data_4$Subset <- ifelse(candidat_data_4$Subset == "BL"| candidat_data_4$Subset == "BH", "BLBH", "W")
Model_4_final_cand_1 <- Model_4_final
Model_4_final_cand_2 <- update(Model_4_final, data = candidat_data_2)
Model_4_final_cand_3 <- update(Model_4_final, data = candidat_data_3)
Model_4_final_cand_4 <- update(Model_4_final, data = candidat_data_4)
Model_4_final_cand_5 <- update(Model_4_final, . ~ . - Subset - morph:Subset - freq_MT:Subset)
AIC_print <- as.data.frame(AIC(Model_4_final_cand_1, Model_4_final_cand_2, Model_4_final_cand_3, Model_4_final_cand_4, Model_4_final_cand_5))
#
# ptop_T_MT_cand2 <- candidat_data_2 %>% group_by(Subset, pop) %>% summarize(Prop_T = mean(Prop_T), MT = sum(Sp2), N = n())
#
# ptop_T_MT_cand3 <- candidat_data_3 %>% group_by(Subset, pop) %>% summarize(Prop_T = mean(Prop_T), MT = sum(Sp2), N = n())
#
# ptop_T_MT_cand4 <- candidat_data_4 %>% group_by(Subset, pop) %>% summarize(Prop_T = mean(Prop_T), MT = sum(Sp2), N = n())
#
#
#
# Model_5_final_cand_1 <- Model_5_final
#
# Model_5_final_cand_2 <- update(Model_5_final, data = ptop_T_MT_cand2)
#
# Model_5_final_cand_3 <- update(Model_5_final, data = ptop_T_MT_cand3)
#
# Model_5_final_cand_4 <- update(Model_5_final, data = ptop_T_MT_cand4)
#
# Model_5_final_cand_5 <- update(Model_5_final, . ~ . - Subset - morph:Subset - freq_MT:Subset)
#
# AIC_print2 <- as.data.frame(AIC(Model_5_final_cand_1, Model_5_final_cand_2, Model_5_final_cand_3, Model_5_final_cand_4, Model_5_final_cand_5))
kable(AIC_print)
#### Data reading and initial preparation #####
myt <- read.table("data_salinity3.csv", header = T, sep = ",")
# Оставляем только мидий, у которых есть оценка морфотипа
myt2 <- myt[!is.na(myt$ind), ]
# Подразделяем данные на сабсеты
myt2$Subset[myt2$sea == "barents" & myt2$sal_place == "fresh"] <- "WBL"
myt2$Subset[myt2$sea == "barents" & myt2$sal_place == "normal"] <- "BH"
myt2$Subset[myt2$sea == "white" & myt2$sal_place == "normal"] <- "WBL"
myt2$Subset[myt2$sea == "white" & myt2$sal_place == "fresh"] <- "WBL"
myt2$Subset[myt2$sea == "Baltic"] <- "BALT"
myt2$Subset[myt2$sea == "GOM"] <- "GOM"
myt2$Subset[myt2$sea == "Norway"] <- "NORW"
myt2$Subset[myt2$sea == "Scotland"] <- "SCOT"
myt2$Subset <- factor(myt2$Subset, levels = c("WBL", "BH", "NORW", "BALT", "SCOT", "GOM" ))
# Вводим обозначения
myt2$Sp [myt2$str > 0.5] <- "M.trossulus" #Лучше обозначать так!
myt2$Sp [myt2$str <= 0.5] <- "M.edulis"
myt2$Sp <- factor(myt2$Sp)
# Вводим обозначения для морфотипов
myt2$morph <- ifelse(myt2$ind == 1, "T_m", "E_m")
myt2$morph <- factor(myt2$morph)
# Бинарное обозначение видов
myt2$Sp2 <- ifelse(myt2$Sp == "M.trossulus", 1, 0)
#Correct identification
myt2$congr <- ifelse((myt2$ind == 1 & myt2$Sp == "M.trossulus") | (myt2$ind == 0 & myt2$Sp == "M.edulis"), 1, 0   )
# Частота M.trossulus в популяции
freq_MT <- myt2 %>% group_by(pop) %>% summarise(freq_MT = mean(Sp2))
myt2 <- merge(myt2, freq_MT)
# Частота T-морфотипа в популяции
Prop_T <- myt2 %>% group_by(pop) %>% summarise(Prop_T = mean(ind))
myt2 <- merge(myt2, Prop_T)
# Разделяем на тестовые и моделинговые датасеты
#
# # Извлекаем из беломорского материала тестовую выборку
# #В формальную тестовую выборку  попадают точки наиболее близкие к 20%, 40%, 60% и 80% freq_MT
#
# selected_pop <- myt2[myt2$Subset == "W", ] %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT)) %>% group_by(Subset) %>% arrange(freq_MT, .by_group = TRUE) %>% mutate(dif_20 = (freq_MT - 0.2)^2, dif_40 = (freq_MT - 0.4)^2, dif_60 = (freq_MT - 0.6)^2, dif_80 = (freq_MT - 0.8)^2)  %>% group_by(Subset)  %>% summarize (n_pop =n(), q_20_pop = nth(pop, which.min(dif_20)), q_40_pop = nth(pop, which.min(dif_40)), q_60_pop = nth(pop, which.min(dif_60)), q_80_pop = nth(pop, which.min(dif_80)))
#
# selected_pop <- melt(selected_pop, id.vars = c("Subset", "n_pop"))$value
#
# testing data set
myt3 <- myt2[myt2$dataset == "testing" | myt2$pop %in% c("kovda", "rya", "chupa", "umba_pil"),  ]
#modelling data set
myt2 <- myt2[! myt2$pop %in% unique(myt3$pop), ]
# Модели для сравнения geographical datasets
myt2_reduced <- myt2[myt2$Subset %in% c("WBL", "BH", "GOM", "BALT"), ]
# unique(myt2_reduced$Subset)
myt2_reduced$Subset <- factor(myt2_reduced$Subset, levels = c("WBL",  "BH",   "GOM",  "BALT"))
# levels(myt2_reduced$Subset)
# library(optimx)
# Model_6_full_geogr <- glmer(congr ~ morph * freq_MT * Subset + (1 | pop), data = myt2_reduced, family = binomial(link = "logit"), control=glmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)))
Model_6_full_geogr <- glmer(congr ~ morph * freq_MT * Subset + (1 | pop), data = myt2_reduced, family = binomial(link = "logit"))
# detach(optimx)
# overdisp_fun(Model_6_full_geogr)
# summary(Model_6_full_geogr)
#
# r.squaredGLMM(Model_6_final)
#
# drop1(Model_6_full_geogr)
# Model_6_full_geogr2 <- update(Model_6_full_geogr, . ~ . - morph:freq_MT:Subset)
# drop1(Model_6_full_geogr2)
Model_6_final <- Model_6_full_geogr
new_data6 <- myt2_reduced %>% group_by(Subset, morph) %>% do(data.frame(freq_MT = seq(min(.$freq_MT), max(.$freq_MT), length.out = 100)))
# Предсказанные значеня в шкале вероятностей
new_data6$fit <- predict(Model_6_final, newdata = new_data6, type = "response", re.form = NA)
# Предсказанные значеня в шкале логитов
new_data6$fit_eta <- predict(Model_6_final, newdata = new_data6, re.form = NA)
# Вычисление доверительного инеравала
# formula(Model_6_final)
X <- model.matrix(  ~ morph * freq_MT * Subset, data = new_data6) #Модельная матрица для визуализации
# Ошибки в шкале логитов
new_data6$se_eta <- sqrt(diag(X %*% vcov(Model_6_final) %*% t(X)))
new_data6$lwr <- logit_back(new_data6$fit_eta - 1.96 * new_data6$se_eta)
new_data6$upr <- logit_back(new_data6$fit_eta + 1.96 * new_data6$se_eta)
Pl_mod6 <- ggplot(new_data6, aes(x = freq_MT)) +
geom_ribbon(aes(ymin = lwr, ymax = upr, group = morph), alpha = 0.1)  +
geom_line(aes(y = fit, color = morph), size=1, linetype = 2) +
geom_rug(data = myt2_reduced, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1) +
scale_color_manual(values = c("blue", "red")) +
scale_fill_manual(values = c("blue", "red"))  +
xlim(0,1)  +
facet_wrap( ~ Subset) +
guides(color = "none")
pr_value_M <- myt2 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_T = sum(ind == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_E = sum(ind == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
pr_value_M$PMT_T <- with(pr_value_M, N_T_MT / N_T)
pr_value_M$PMT_E <- with(pr_value_M, N_E_MT / N_T)
pr_value_M$PME_E <- with(pr_value_M, N_E_ME / N_E)
pr_value_M$PME_T <- with(pr_value_M, N_T_ME / N_E)
Pl_mod6_with_initial_data <- Pl_mod6 + geom_segment(data = pr_value_M, aes(x = freq_MT, y = PME_E, xend = freq_MT, yend = PMT_T), color="darkgrey") +
geom_hline(data = pr_value_M, aes(yintercept=0.5), color="black") +
geom_point(data = pr_value_M, aes(y = PME_E), fill = "white", shape = 21) +
geom_point(data = pr_value_M, aes(y = PMT_T), fill = "black", shape = 21) +
labs(y =  "Proportions of correct species \n identification by morphotypes", x = "Proportion of M. trossulus", fill = "")+
ylim(0,1) +
xlim(0,1) +
theme_bw()
ptop_T_MT <- myt2_reduced %>% group_by(Subset, pop) %>% summarize(Prop_T = mean(Prop_T), MT = sum(Sp2), N = n())
# ptop_T_MT <- ptop_T_MT[! ptop_T_MT$pop %in% c("Limh88", "CBCP"), ]
Model_7_full <- glm(cbind(MT, (N-MT)) ~  Prop_T * Subset, data = ptop_T_MT, family = binomial(link = "logit"))
#
# Model_7_full <- glm(Sp2 ~  Prop_T * Subset, data = myt2_reduced, family = binomial(link = "logit"))
#  overdisp_fun(Model_7_full)
# drop1(Model_7_full, test = "Chi")
# Model_7_1 <- update(Model_7_full, . ~ . - Prop_T:Subset)
# drop1(Model_7_1, test = "Chi")
Model_7_final <- Model_7_full
new_data5 <- myt2_reduced %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(Prop_T) ) %>% group_by(Subset) %>%  do(data.frame(Prop_T = seq(min(.$Prop_T), max(.$Prop_T), length.out = 10)))
predicted5 <- predict(Model_7_final, newdata = new_data5,  type="response", se.fit = T)
new_data5$fit <- predicted5$fit
new_data5$SE <- predicted5$se.fit
Pl_mod7 <- ggplot(new_data5, aes(x = Prop_T, y = fit)) + geom_line(linetype = 2, color = "red", size = 1) + facet_wrap(~Subset) + geom_ribbon(aes(ymin = fit - 1.96*SE, ymax = fit + 1.96*SE), alpha = 0.1) + xlim(0, 1) + ylim(0, 1) +  geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = Prop_T), size = 0.1) + geom_abline()
init_data_Model_7 <- myt2 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(morph == "T_m"),  freq_MT = mean(Sp == "M.trossulus"), N = n())
# init_data_Model_7 <- init_data_Model_7[init_data_Model_7$pop %in% c("Limh88", "CBCP"),  ]
Pl_mod7_with_initial_data <- Pl_mod7 + geom_point(data = init_data_Model_7, aes( y = freq_MT), shape = 21, size = 2 ) + scale_fill_continuous(low = "white", high = "black") + labs(x = "Proportion of mussels with T-morphotype", y = "Proportion of M.trossulus \n") + theme_bw()
## Визуализация новой модели с объединенными датасетами
mixed_data <- myt2[myt2$Subset %in% c("WBL"), ]
#
#
# #########################
#
Model_WBL_full <- glmer(congr ~ morph * freq_MT + (1 | pop), data = mixed_data, family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
# overdisp_fun(Model_6_full)
# drop1(Model_7_full, test = "Chi")
Model_6_final <- Model_6_full
## Визуализация новой модели с объединенными датасетами
mixed_data <- myt2[myt2$Subset %in% c("WBL"), ]
#
#
# #########################
#
Model_WBL_full <- glmer(congr ~ morph * freq_MT + (1 | pop), data = mixed_data, family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
# overdisp_fun(Model_6_full)
# drop1(Model_7_full, test = "Chi")
Model_6_final <- Model_WBL_full
Model_6_final_summary <- tidy(Model_6_final)
Model_6_final_summary <- Model_6_final_summary[,!(names(Model_6_final_summary) %in% c("group"))]
Model_6_final_R2_m <- r.squaredGLMM(Model_6_final)[1,1]
Model_6_final_R2_c <- r.squaredGLMM(Model_6_final)[1, 2]
new_data6 <-mixed_data %>% group_by(morph) %>% do(data.frame(freq_MT = seq(min(.$freq_MT), max(.$freq_MT), length.out = 100)))
# Предсказанные значеня в шкале вероятностей
new_data6$fit <- predict(Model_6_final, newdata = new_data6, type = "response", re.form = NA)
# Предсказанные значеня в шкале логитов
new_data6$fit_eta <- predict(Model_6_final, newdata = new_data6, re.form = NA)
# Вычисление доверительного инеравала
X <- model.matrix(  ~ morph * freq_MT, data = new_data6) #Модельная матрица для визуализации
# Ошибки в шкале логитов
new_data6$se_eta <- sqrt(diag(X %*% vcov(Model_6_final) %*% t(X)))
new_data6$lwr <- logit_back(new_data6$fit_eta - 1.96 * new_data6$se_eta)
new_data6$upr <- logit_back(new_data6$fit_eta + 1.96 * new_data6$se_eta)
Pl_mod6 <- ggplot(new_data6, aes(x = freq_MT)) +
geom_ribbon(aes(ymin = lwr, ymax = upr, group = morph), alpha = 0.1)  +
geom_line(aes(y = fit, color = morph), size=1, linetype = 2) +
geom_rug(data = candidat_data_2, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1) +
scale_color_manual(values = c("blue", "red")) +
scale_fill_manual(values = c("blue", "red"))  +
xlim(0,1)
Model_7 <- glm(Sp2 ~  Prop_T , data = mixed_data, family = binomial(link = "logit"))
# overdisp_fun(Model_7)
Model_7_final <- Model_7
Model_7_final_summary <- tidy(Model_7_final)
Model_7_R2 <- r.squaredGLMM(Model_7_final)[1,1]
new_data7 <- mixed_data %>% group_by(pop) %>% summarise(Prop_T = mean(Prop_T) ) %>%  do(data.frame(Prop_T = seq(min(.$Prop_T), max(.$Prop_T), length.out = 100)))
predicted7 <- predict(Model_7_final, newdata = new_data7,  type="response", se.fit = T)
new_data7$fit <- predicted7$fit
new_data7$SE <- predicted7$se.fit
Pl_mod7 <- ggplot(new_data7, aes(x = Prop_T, y = fit)) + geom_line(linetype = 2, color = "red", size = 1) +  geom_ribbon(aes(ymin = fit - 1.96*SE, ymax = fit + 1.96*SE), alpha = 0.1) + xlim(0, 1) + ylim(0, 1) +  geom_rug(data = candidat_data_2, inherit.aes = FALSE,  aes(x = Prop_T), size = 0.1) + geom_abline()
Pl_mod7
mixed_data <- myt2[myt2$Subset %in% c("WBL"), ]
Pl_teor_empir_7 <- ggplot(perms2(df = mixed_data, regr_model = Model_7_final), aes(x = Delta, y = Goodness)) + geom_point(size = 0.1) + geom_smooth(se = F) + labs(y = "Goodness \n")
Pl_teor_empir_7 <- Pl_teor_empir_7 + ggtitle("Regression Model 8 \nvs Theoretical model Eq 3")
Pl_teor_empir_6 <- ggplot(perms4(df = mixed_data, regr_model = Model_6_final), aes(x = Delta, y = Goodness)) + geom_point(size = 0.1) + geom_smooth(se = F) + labs(y = "Goodness \n")
# Pl_teor_empir_6 <- Pl_teor_empir_6 + ggtitle("Regression Model 6 \nvs Theoretical model Eq 1, Eq 2")
mixed_data <- myt2[myt2$Subset %in% c("WBL"), ]
Pl_teor_empir_7 <- ggplot(perms2(df = mixed_data, regr_model = Model_7_final), aes(x = Delta, y = Goodness)) + geom_point(size = 0.1) + geom_smooth(se = F) + labs(y = "Goodness \n")
Pl_teor_empir_7 <- Pl_teor_empir_7 + ggtitle("Regression Model 8 \nvs Theoretical model Eq 3")
Pl_teor_empir_6 <- ggplot(perms4(df = mixed_data, regr_model = Model_6_final), aes(x = Delta, y = Goodness)) + geom_point(size = 0.1) + geom_smooth(se = F) + labs(y = "Goodness \n")
# Pl_teor_empir_6 <- Pl_teor_empir_6 + ggtitle("Regression Model 6 \nvs Theoretical model Eq 1, Eq 2")
# Визуализация модели 7 и ленивого калькулятора 1, основанного на выборках максимально далеких по генетической структуре.
# Популяции наиболее различные по генетической структуре
pops_max_diff <- max_dif(df = mixed_data, Subset = c("WBL"))
# Популяции наиболее смешанные
pops_max_mix <- max_mix(df = mixed_data, Subset = c("WBL"))
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif <- donat(df = mixed_data[mixed_data$pop %in% pops_max_diff, ])
# Бублики для наиболее смешанных популяций
donat_max_mix <- donat(df = mixed_data[mixed_data$pop %in% pops_max_mix, ])
# Описание структуры калибровочных популяций
calc1_calib_pop_str <- calib_str(df = mixed_data, pop1 = pops_max_diff [1], pop2 = pops_max_diff [2])
calc2_calib_pop_str <- calib_str(df = mixed_data, pop1 = pops_max_mix [1], pop2 = pops_max_mix [2])
calc1_W <- calc1(donat_max_dif[1], donat_max_dif[2]) #Предсказания калькулятора 1 на основе наиболее различных по генетической структуре популяций
calc1_B <- calc1(donat_max_mix[1], donat_max_mix[2]) #Предсказания калькулятора 1 на основе наиболее смешанных популяций
# coef_calc1_W  <- coef(lm(Ptros ~ P_T, data = calc1_W )) #Коэффицинты для теоретичекой модели, описывющей калькулятор 1
myt5 <- myt3[myt3$Subset %in% c("WBL"), ]
Pl_calc1_mod7 <- Pl_mod7 + geom_line(data = calc1_W, aes(x = P_T, y = Ptros), color = "blue", size = 1) + geom_line(data = calc1_B, aes(x = P_T, y = Ptros), color = "gray")  + geom_point(data = myt5, aes(x = Prop_T, y = freq_MT), size = 4, color = "red")  + labs(x = "Proportion of T-morphotype", y = "Proportion of M.trossulus \n")
# Визуализация модели 4 и ленивого калькулятора 2, основанного на выборках максимально смешанных.
calc2_W <- calc2(donat_max_mix[1], donat_max_mix[2])
calc2_B <- calc2(donat_max_dif[1], donat_max_dif[2])
# Числа, необходимые для вычсления предсказанных значений для калькулятора №2
coef_calc2 <- mixed_data[mixed_data$pop %in% calc2_calib_pop_str$pop, ] %>% summarise(P_T_ME = mean(Sp == "M.edulis" & morph == "T_m"), P_T_MT = mean(Sp == "M.trossulus" & morph == "T_m"))
testing_congr <- myt5 %>% group_by(pop, morph) %>% summarize(Pcorrect = mean(congr == 1), freq_MT = mean(freq_MT))
Pl_calc2_mod6 <- Pl_mod6 + geom_line(data = calc2_W, aes(x = freq_MT, y = P_MT_T), color = "red", size = 2) + geom_line(data = calc2_W, aes(x = freq_MT, y = P_ME_E), color = "blue", size = 2) + geom_line(data = calc2_B, aes(x = freq_MT, y = P_MT_T), color = "gray") + geom_line(data = calc2_B, aes(x = freq_MT, y = P_ME_E), color = "gray") + geom_point(data = testing_congr, aes(x = freq_MT, y = Pcorrect, fill = morph), shape = 24, size = 3, position = position_dodge(width = 0) ) + labs(x = "Proportion of M.trossulus", y = "Probability of \ncorrect identification ")
grid.arrange(Pl_teor_empir_7, Pl_teor_empir_6, Pl_calc1_mod7, Pl_calc2_mod6, nrow =2)
T
empty_row <- rep(NA, 7)
all_calibr <- rbind(empty_row, as.data.frame(calc1_calib_pop_str), empty_row, as.data.frame(calc2_calib_pop_str))
all_calibr$P_T_ME <- round(all_calibr$P_T_ME, 2)
all_calibr$P_T_MT <- round(all_calibr$P_T_MT, 2)
all_calibr$Ptros <- round(all_calibr$Ptros, 2)
all_calibr$pop <- as.character(all_calibr$pop)
all_calibr$pop[is.na(all_calibr$pop)] <- c("**Theoretical model 1**", "**Theoretical model 2**")
kable(all_calibr)
# Визуализация модели 7 и ленивого калькулятора 1, основанного на выборках максимально далеких по генетической структуре.
# Популяции наиболее различные по генетической структуре
pops_max_diff <- max_dif(df = myt2, Subset = c("GOM"))
# Популяции наиболее смешанные
pops_max_mix <- max_mix(df = myt2, Subset = c("GOM"))
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif <- donat(df = myt2[myt2$pop %in% pops_max_diff, ])
# Бублики для наиболее смешанных популяций
donat_max_mix <- donat(df = myt2[myt2$pop %in% pops_max_mix, ])
# Описание структуры калибровочных популяций
calc1_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_diff [1], pop2 = pops_max_diff [2])
calc2_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_mix [1], pop2 = pops_max_mix [2])
calc1_GOM_good <- calc1(donat_max_dif[1], donat_max_dif[2]) #Предсказания калькулятора 1 на основе наиболее различных по генетической структуре популяций
calc1_GOM_bad <- calc1(donat_max_mix[1], donat_max_mix[2]) #Предсказания калькулятора 1 на основе наиболее смешанных популяций
ggplot(calc1_GOM_good, aes(x = P_T, y = Ptros)) + geom_line(color = "blue") + geom_line(data = calc1_GOM_bad, color = "gray") + geom_point(data = init_data_Model_7[init_data_Model_7$Subset == "GOM", ], aes(x = Prop_T, y = freq_MT), shape = 21, size = 2 )
# coef_calc1_W  <- coef(lm(Ptros ~ P_T, data = calc1_W )) #Коэффицинты для теоретичекой модели, описывющей калькулятор 1
# Визуализация модели 7 и ленивого калькулятора 1, основанного на выборках максимально далеких по генетической структуре.
# Популяции наиболее различные по генетической структуре
pops_max_diff <- max_dif(df = myt2, Subset = c("BALT"))
# Популяции наиболее смешанные
pops_max_mix <- max_mix(df = myt2, Subset = c("BALT"))
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif <- donat(df = myt2[myt2$pop %in% pops_max_diff, ])
# Бублики для наиболее смешанных популяций
donat_max_mix <- donat(df = myt2[myt2$pop %in% pops_max_mix, ])
# Описание структуры калибровочных популяций
calc1_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_diff [1], pop2 = pops_max_diff [2])
calc2_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_mix [1], pop2 = pops_max_mix [2])
calc1_GOM_good <- calc1(donat_max_dif[1], donat_max_dif[2]) #Предсказания калькулятора 1 на основе наиболее различных по генетической структуре популяций
calc1_GOM_bad <- calc1(donat_max_mix[1], donat_max_mix[2]) #Предсказания калькулятора 1 на основе наиболее смешанных популяций
ggplot(calc1_GOM_good, aes(x = P_T, y = Ptros)) + geom_line(color = "blue") + geom_line(data = calc1_GOM_bad, color = "gray") + geom_point(data = init_data_Model_7[init_data_Model_7$Subset == "GOM", ], aes(x = Prop_T, y = freq_MT), shape = 21, size = 2 )
# coef_calc1_W  <- coef(lm(Ptros ~ P_T, data = calc1_W )) #Коэффицинты для теоретичекой модели, описывющей калькулятор 1
ggplot(calc1_GOM_good, aes(x = P_T, y = Ptros)) + geom_line(color = "blue") + geom_line(data = calc1_GOM_bad, color = "gray") + geom_point(data = init_data_Model_7[init_data_Model_7$Subset == "BALT", ], aes(x = Prop_T, y = freq_MT), shape = 21, size = 2 )
# Визуализация модели 7 и ленивого калькулятора 1, основанного на выборках максимально далеких по генетической структуре.
# Популяции наиболее различные по генетической структуре
pops_max_diff <- max_dif(df = myt2, Subset = c("SCOT"))
# Популяции наиболее смешанные
pops_max_mix <- max_mix(df = myt2, Subset = c("SCOT"))
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif <- donat(df = myt2[myt2$pop %in% pops_max_diff, ])
# Бублики для наиболее смешанных популяций
donat_max_mix <- donat(df = myt2[myt2$pop %in% pops_max_mix, ])
# Описание структуры калибровочных популяций
calc1_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_diff [1], pop2 = pops_max_diff [2])
calc2_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_mix [1], pop2 = pops_max_mix [2])
calc1_GOM_good <- calc1(donat_max_dif[1], donat_max_dif[2]) #Предсказания калькулятора 1 на основе наиболее различных по генетической структуре популяций
calc1_GOM_bad <- calc1(donat_max_mix[1], donat_max_mix[2]) #Предсказания калькулятора 1 на основе наиболее смешанных популяций
ggplot(calc1_GOM_good, aes(x = P_T, y = Ptros)) + geom_line(color = "blue") + geom_line(data = calc1_GOM_bad, color = "gray") + geom_point(data = init_data_Model_7[init_data_Model_7$Subset == "SCOT", ], aes(x = Prop_T, y = freq_MT), shape = 21, size = 2 )
# coef_calc1_W  <- coef(lm(Ptros ~ P_T, data = calc1_W )) #Коэффицинты для теоретичекой модели, описывющей калькулятор 1
Subset <- "GOM"
# Популяции наиболее различные по генетической структуре
pops_max_diff <- max_dif(df = myt2, Subset = c(Subset))
# Визуализация модели 7 и ленивого калькулятора 1, основанного на выборках максимально далеких по генетической структуре.
Subset <- "GOM"
# Популяции наиболее различные по генетической структуре
pops_max_diff <- max_dif(df = myt2, Subset = c(Subset))
# Популяции наиболее смешанные
pops_max_mix <- max_mix(df = myt2, Subset = c(Subset))
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif <- donat(df = myt2[myt2$pop %in% pops_max_diff, ])
# Бублики для наиболее смешанных популяций
donat_max_mix <- donat(df = myt2[myt2$pop %in% pops_max_mix, ])
# Описание структуры калибровочных популяций
calc1_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_diff [1], pop2 = pops_max_diff [2])
calc2_calib_pop_str <- calib_str(df = myt2, pop1 = pops_max_mix [1], pop2 = pops_max_mix [2])
calc1_GOM_good <- calc1(donat_max_dif[1], donat_max_dif[2]) #Предсказания калькулятора 1 на основе наиболее различных по генетической структуре популяций
calc1_GOM_bad <- calc1(donat_max_mix[1], donat_max_mix[2]) #Предсказания калькулятора 1 на основе наиболее смешанных популяций
ggplot(calc1_GOM_good, aes(x = P_T, y = Ptros)) + geom_line(color = "blue") + geom_line(data = calc1_GOM_bad, color = "gray") + geom_point(data = init_data_Model_7[init_data_Model_7$Subset == Subset, ], aes(x = Prop_T, y = freq_MT), shape = 21, size = 2 )
# coef_calc1_W  <- coef(lm(Ptros ~ P_T, data = calc1_W )) #Коэффицинты для теоретичекой модели, описывющей калькулятор 1
myt_X <- myt2[myt2$Subset %in% c("WBL", "BH"), ]
is.na(myt_X$size)
sum(is.na(myt_X$size))
sum(!is.na(myt_X$size))
Mod_X <- glmer(ind ~ size*Sp2*Subset + (1|pop), data = myt_X, family = "binomial")
Mod_X <- glmer(ind ~ size*Sp2*Subset + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X_rs <- glmer(ind ~ size*Subset + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
myt_X$Sp
myt_X$Sp2
Mod_X <- glmer(ind ~ size*Sp*Subset + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X_rs <- glmer(ind ~ size*Sp*Subset + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X <- glmer(ind ~ scale(size)*Sp*Subset + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X_rs <- glmer(ind ~ scale(size)*Sp*Subset + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
AIC(Mod_X, Mod_X_rs)
resid_cor2
resid_cor
ggplot(new_data_size, aes(x = size, y = Predict, group = pop)) + geom_line() + facet_wrap(~Subset)
Mod_X_rs <- glmer(ind ~ scale(size)*Sp*Subset + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e6)))
Mod_X <- glmer(ind ~ scale(size)*Sp + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X_rs <- glmer(ind ~ scale(size)*Sp + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e6)))
AIC(Mod_X, Mod_X_rs)
summary(Mod_X_rs)
Mod_X <- glmer(ind ~ Sp*Subset + Size + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X <- glmer(ind ~ Sp*Subset + size + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X_rs <- glmer(ind ~ Sp*Subset + size + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e6)))
AIC(Mod_X, Mod_X_rs)
summary(Mod_X_rs)
r.squaredGLMM(Mod_X_rs)
Mod_X <- glmer(ind ~ Sp*Subset * size + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
Mod_X <- glmer(ind ~ Sp*Subset * size + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)))
library("optimx")
Mod_X <- glmer(ind ~ Sp*Subset * size + (1|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)))
Mod_X_rs <- glmer(ind ~ Sp*Subset * size + (1 + size|pop), data = myt_X, family = "binomial", control=glmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)))
AIC(Mod_X, Mod_X_rs)
summary(Mod_X)
library(doBy)
myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~ Sp + size, data = .))
myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~ Sp + size, family = "binomial", data = .))
myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~ size, family = "binomial", data = .))
myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~ Sp + size, family = "binomial", data = .))
table(myt_X$pop, myt_X$Sp)
myt_X <- myt2[myt2$Subset %in% c("WBL", "BH"), ]
myt_X$pop <- factor(myt_X$pop)
unique(myt_X$pop)
table(myt_X$pop, myt_X$Sp)
myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
dd <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
str(dd)
dd$model
myt_X$Sp$AIC
myt_X$Sp
dd$model$AIC
dd$model
summary(dd$model)
dd %>% tidy(model)
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models %>% tidy(model)
size_models_res <- size_models %>% tidy(model)
size_models_res
size_models_res$term
size_models_res[size_models_res$term != "(Intercept)"]
size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope <- size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
size_models_res_slope
View(size_models_res_slope)
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope[size_models_res_slope$p.value < 0.05, ]
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  Sp + size, family = "binomial", data = .))
table(myt_X$pop, myt_X$Sp)
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_res <- size_models %>% tidy(model)
size_models_res_slope <- size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope[size_models_res_slope$p.value < 0.05, ]
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(congr ~  size, family = "binomial", data = .))
size_models_res <- size_models %>% tidy(model)
size_models_res_slope <- size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope[size_models_res_slope$p.value < 0.05, ]
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(congr ~  size, family = "binomial", data = .))
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_res <- size_models %>% tidy(model)
size_models_res_slope <- size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
myt_X %>% group_by(Subset, pop) %>% summarise(rang = range(size))
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(siz))
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))[pop == "umba",]
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))[myt_X$pop == "umba",]
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "umba")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "banka")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "berzakol")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "abram")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "seredina_sub")
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_res <- size_models %>% tidy(model)
size_models_res_slope <- size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "ustie_sub")
size_models <- myt2 %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models <- myt_X %>% group_by(Subset, pop) %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_res <- size_models %>% tidy(model)
size_models_res_slope <- size_models_res[size_models_res$term != "(Intercept)", ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
size_models_res_slope
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "ustie_sub")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope[size_models_res_slope$p.value < 0.05, ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "bonferroni")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "ustie_sub")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "BH")
myt_X %>% group_by(Subset, pop) %>% summarise(min = min(size), max = max(size))%>% filter(pop == "ustie_sub")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
size_models_res_slope$p_adj <- p.adjust(size_models_res_slope$p.value, method = "hochberg")
size_models_res_slope[size_models_res_slope$p_adj < 0.05, ]
