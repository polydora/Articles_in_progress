myt2_all$Subset <- factor(myt2_all$Subset, levels = c("WSBL", "BH", "NORW", "BALT", "SCOT", "GOM" ))
# Вводим обозначения
myt2_all$Sp [myt2_all$str > 0.5] <- "M.trossulus" #Лучше обозначать так!
myt2_all$Sp [myt2_all$str <= 0.5] <- "M.edulis"
myt2_all$Sp <- factor(myt2_all$Sp)
# Вводим обозначения для морфотипов
myt2_all$morph <- ifelse(myt2_all$ind == 1, "T_m", "E_m")
myt2_all$morph <- factor(myt2_all$morph)
# Бинарное обозначение видов
myt2_all$Sp2 <- ifelse(myt2_all$Sp == "M.trossulus", 1, 0)
#Correct identification
myt2_all$congr <- ifelse((myt2_all$ind == 1 & myt2_all$Sp == "M.trossulus") | (myt2_all$ind == 0 & myt2_all$Sp == "M.edulis"), 1, 0   )
# Частота M.trossulus в популяции
freq_MT <- myt2_all %>% group_by(pop) %>% summarise(freq_MT = mean(Sp2))
myt2_all <- merge(myt2_all, freq_MT)
# Частота T-морфотипа в популяции
Prop_T <- myt2_all %>% group_by(pop) %>% summarise(Prop_T = mean(ind))
myt2_all <- merge(myt2_all, Prop_T)
# Разделяем на тестовые и моделинговые датасеты
#
# # Извлекаем из беломорского материала тестовую выборку
# #В формальную тестовую выборку  попадают точки наиболее близкие к 20%, 40%, 60% и 80% freq_MT
#
# selected_pop <- myt2_all[myt2_all$Subset == "W", ] %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT)) %>% group_by(Subset) %>% arrange(freq_MT, .by_group = TRUE) %>% mutate(dif_20 = (freq_MT - 0.2)^2, dif_40 = (freq_MT - 0.4)^2, dif_60 = (freq_MT - 0.6)^2, dif_80 = (freq_MT - 0.8)^2)  %>% group_by(Subset)  %>% summarize (n_pop =n(), q_20_pop = nth(pop, which.min(dif_20)), q_40_pop = nth(pop, which.min(dif_40)), q_60_pop = nth(pop, which.min(dif_60)), q_80_pop = nth(pop, which.min(dif_80)))
#
# selected_pop <- melt(selected_pop, id.vars = c("Subset", "n_pop"))$value
#
# testing data set
# myt3_all <- myt2_all[myt2_all$dataset == "testing" | myt2_all$pop %in% c("kovda", "rya", "chupa", "umba_pil"),  ]
# myt3_all$pop2 <- myt3_all$pop
#modelling data set
# myt2_all <- myt2_all[! myt2_all$pop %in% unique(myt3$pop), ]
# Модели для сравнения geographical datasets
myt2_reduced <- myt2_all[myt2_all$Subset %in% c("WSBL", "BH", "GOM", "BALT", "NORW"), ]
# unique(myt2_reduced$Subset)
myt2_reduced$Subset <- factor(myt2_reduced$Subset, levels = c("WSBL",  "BH",   "GOM",  "BALT", "NORW"))
# levels(myt2_reduced$Subset)
# Model 6 #####################
library(optimx)
Model_6_full_geogr <- glmer(congr ~ morph * freq_MT * Subset + (1 | pop), data = myt2_reduced, family = binomial(link = "logit"), control=glmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)))
# Model_6_full_geogr <- glmer(congr ~ morph * freq_MT * Subset + (1 | pop), data = myt2_reduced, family = binomial(link = "logit"))
# overdisp_fun(Model_6_full_geogr)
# summary(Model_6_full_geogr)
#
# r.squaredGLMM(Model_6_final)
#
# drop1(Model_6_full_geogr, test = "Chi")
# Model_6_full_geogr2 <- update(Model_6_full_geogr, . ~ . - morph:freq_MT:Subset)
# drop1(Model_6_full_geogr2)
Model_6_final <- Model_6_full_geogr
Model_6_final_summary <- tidy(Model_6_final)
Model_6_final_summary <- Model_6_final_summary[,!(names(Model_6_final_summary) %in% c("group"))]
Model_6_final_R2_m <- r.squaredGLMM(Model_6_final)[1,1]
Model_6_final_R2_c <- r.squaredGLMM(Model_6_final)[1, 2]
# Model 7 #####################
ptop_T_MT <- myt2_reduced %>% group_by(Subset, pop) %>% summarize(Prop_T = mean(Prop_T), MT = sum(Sp2), N = n())
# ptop_T_MT <- ptop_T_MT[! ptop_T_MT$pop %in% c("Limh88", "CBCP"), ]
Model_7_full <- glm(cbind(MT, (N-MT)) ~  Prop_T * Subset, data = ptop_T_MT, family = binomial(link = "logit"))
#
# Model_7_full <- glm(Sp2 ~  Prop_T * Subset, data = myt2_reduced, family = binomial(link = "logit"))
#  overdisp_fun(Model_7_full)
# drop1(Model_7_full, test = "Chi")
# Model_7_1 <- update(Model_7_full, . ~ . - Prop_T:Subset)
# drop1(Model_7_1, test = "Chi")
Model_7_final <- Model_7_full
Model_7_final_summary <- tidy(Model_7_final)
Model_7_final_R2 <- r.squaredGLMM(Model_7_final)[1,1]
# Model 8 #####################
Model_8_full <- glmer(ind ~  freq_MT * Subset * Sp + (1|pop), data = myt2_reduced, family = binomial(link = "logit"), control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
# overdisp_fun(Model_8_full)
# drop1(Model_8_full, test = "Chi")
# Model_8_1 <- update(Model_8_full, . ~ . - freq_MT:Subset:Sp)
# drop1(Model_8_1, test = "Chi")
# Model_2_2 <- update(Model_2_1, . ~ . - freq_MT:Subset)
# drop1(Model_2_2, test = "Chi")
# Model_2_3 <- update(Model_2_2, . ~ . - freq_MT:Sp)
# drop1(Model_2_3, test = "Chi")
Model_8_final <- Model_8_full
Model_8_final_summary <- tidy(Model_8_final)
Model_8_final_summary <- Model_8_final_summary[,!(names(Model_8_final_summary) %in% c("group"))]
Model_8_final_R2_m <- r.squaredGLMM(Model_8_final)[1,1]
Model_8_final_R2_c <- r.squaredGLMM(Model_8_final)[1, 2]
# Распечатка результатов всех моделей
empty_row <- rep(NA, 5 )
all_models <- rbind(empty_row, Model_1_final_summary, empty_row, Model_2_final_summary[, -1], empty_row,  Model_4_final_summary[, -1], empty_row,  Model_7_final_summary, empty_row, Model_8_final_summary[, -1],empty_row, Model_6_final_summary[, -1])
all_models$estimate <- round(all_models$estimate, 1)
all_models$std.error <- round(all_models$std.error, 2)
all_models$statistic <- round(all_models$statistic, 2)
all_models$p.value <- round(all_models$p.value, 3)
all_models$p.value_print <- ifelse(all_models$p.value < 0.001, "< 0.001", all_models$p.value)
all_models$term_print <- gsub("freq_MT", "Ptros", as.character(all_models$term))
all_models$term_print <- gsub("SubsetBL", "Set(BL)", as.character(all_models$term_print))
all_models$term_print <- gsub("SubsetBH", "Set(BH)", as.character(all_models$term_print))
all_models$term_print <- gsub("morphT_m", "Morph(T)", as.character(all_models$term_print))
all_models$term_print <- gsub("sd_(Intercept).pop", "SD(Intercept)", as.character(all_models$term_print))
all_models$term_print <- gsub("SpM.trossulus", "Species(*M.trossulus*)", as.character(all_models$term_print))
all_models$term_print <- gsub("Prop_T", "PT", as.character(all_models$term_print))
all_models$term_print <- gsub("SubsetWSBL", "Set(WSBL)", as.character(all_models$term_print))
all_models_print <- all_models[, c("term_print", "estimate", "std.error", "statistic", "p.value_print" )]
all_models_print$term_print [is.na(all_models_print$term_print)] <- c("**Model 1**", "**Model 2**", "**Model 3**", "**Model 4**", " **Model 5**", " **Model 6**")
# Вставляем данные pseudo Rsq
all_models_print$estimate [is.na(all_models_print$estimate)] <- c(
paste("$pseudo R^2$ = ", round(Model_1_R2, 2)),
paste("$pseudo R^2_{m}$ = ", round(Model_2_final_R2_m, 2)),
paste("$pseudo R^2_{m}$ = ", round(Model_4_final_R2_m, 2)),
paste("$pseudo R^2$ = ", round(Model_7_final_R2, 2)),
paste("$pseudo R^2_{m}$ = ", round(Model_8_final_R2_m, 2)),
paste("$pseudo R^2_{m}$ = ", round(Model_6_final_R2_m, 2))
)
all_models_print$std.error [is.na(all_models_print$std.error)] <- c(
NA,
paste("$pseudo R^2_{c}$ = ", round(Model_2_final_R2_c, 2)),
NA,
paste("$pseudo R^2_{c}$ = ", round(Model_4_final_R2_c, 2)),
NA,
paste("$pseudo R^2_{c}$ = ", round(Model_7_final_R2, 2)),
paste("$pseudo R^2_{c}$ = ", round(Model_8_final_R2_c, 2)),
NA,
paste("$pseudo R^2_{c}$ = ", round(Model_6_final_R2_c, 2)),
NA
)
##
# Model1 ##############################
new_data <- myt2 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT) ) %>% group_by(Subset) %>%  do(data.frame(freq_MT = seq(min(.$freq_MT), max(.$freq_MT), length.out = 10)))
predicted <- predict(Model_1_final, newdata = new_data,  type="response", se.fit = T)
new_data$fit <- predicted$fit
new_data$SE <- predicted$se.fit
Pl_mod1 <- ggplot(new_data, aes(x = freq_MT, y = fit)) + geom_line(linetype = 2, color = "red", size = 1) + facet_wrap(~Subset) + geom_ribbon(aes(ymin = fit - 1.96*SE, ymax = fit + 1.96*SE), alpha = 0.1) + xlim(0, 1) + ylim(0, 1) +  geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1)
# иллюстрация с точками
link_over_M <- myt2 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(Sp2), freq_Tmorph = mean(ind), N_MT = sum(Sp2 == 1),  N_ME = sum(Sp2 == 0))
Pl_mod1_with_initial_data_no_test <- Pl_mod1 +
geom_point(data = link_over_M, aes(y = freq_Tmorph, size = (N_MT+N_ME)), shape = 21, fill = "gray") +
scale_fill_continuous(high = "black", low = "white" ) +
geom_abline() +
labs(x =  "Ptros", y = "PT \n") +
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())
# test_Model_1 <- myt3 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(Sp2), freq_Tmorph = mean(ind), N_MT = sum(Sp2 == 1),  N_ME = sum(Sp2 == 0))
# Pl_mod1_with_initial_data <- Pl_mod1_with_initial_data_no_test + geom_point(data = test_Model_1, aes(x = freq_MT, y =freq_Tmorph, size = N_MT+N_ME), fill = "red", shape = 23 )
Pl_mod1_with_initial_data <- Pl_mod1_with_initial_data_no_test
# Model_2 ##############################
new_data2 <- myt2 %>% group_by(Subset,  Sp) %>% do(data.frame(freq_MT = seq(min(.$freq_MT), max(.$freq_MT), length.out = 100)))
new_data2$eta <- predict(Model_2_final, newdata = new_data2,  re.form = NA)
X <- model.matrix(~  freq_MT * Subset * Sp , data = new_data2)
new_data2$SE_eta <- sqrt(diag(X %*% vcov(Model_2_final) %*% t(X)))
new_data2$fit <- logit_back(new_data2$eta)
new_data2$lwr <- logit_back(new_data2$eta -  1.96 *new_data2$SE_eta)
new_data2$upr <- logit_back(new_data2$eta +  1.96 *new_data2$SE_eta)
Pl_mod2 <-  ggplot(new_data2, aes(x = freq_MT, y = fit, group = Sp)) + geom_line(linetype = 2,  size = 1, aes(color = Sp)) + geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.1) + facet_wrap(~Subset)  + xlim(0, 1) + ylim(0, 1) + scale_color_manual(values=c("blue", "red")) + guides(color = "none") +  geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1)
pops_over_M <- myt2 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_MT = sum(Sp2 == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_ME = sum(Sp2 == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
pops_over_M$P_T_MT <- with(pops_over_M, N_T_MT / N_MT)
pops_over_M$P_E_MT <- with(pops_over_M, N_E_MT / N_MT)
pops_over_M$P_E_ME <- with(pops_over_M, N_E_ME / N_ME)
pops_over_M$P_T_ME <- with(pops_over_M, N_T_ME / N_ME)
Pl_mod2_with_initial_data_no_test <- Pl_mod2 +   geom_segment(data = pops_over_M, aes(x = freq_MT, y = (1-P_E_ME), xend = freq_MT, yend = P_T_MT, group = 1), color = "darkgray")+
geom_hline(aes(yintercept=0.5), color="black") +
geom_point(data = pops_over_M, aes(y = (1-P_E_ME), size= N_ME, group =1), fill = "white", shape = 21)+
geom_point(data = pops_over_M, aes(y = P_T_MT, size=N_MT, group =1), fill = "black", shape = 21)  + xlim(0,1)+
labs(y =  "P(T|edu)\nP(T|tros)", x = "Ptros", fill = "") +
ylim(0,1) + xlim(0,1) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())
# test_Model_2 <- myt3%>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_MT = sum(Sp2 == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_ME = sum(Sp2 == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
#
# test_Model_2$P_T_MT <- with(test_Model_2, N_T_MT / N_MT)
# test_Model_2$P_E_MT <- with(test_Model_2, N_E_MT / N_MT)
# test_Model_2$P_E_ME <- with(test_Model_2, N_E_ME / N_ME)
# test_Model_2$P_T_ME <- with(test_Model_2, N_T_ME / N_ME)
# Pl_mod2_with_initial_data <- Pl_mod2_with_initial_data_no_test +  geom_point(data = test_Model_2, aes(y = (1-P_E_ME), size= N_ME, group =1), fill = "red", shape = 24)+
#   geom_point(data = test_Model_2, aes(y = P_T_MT, size=N_MT, group =1), fill = "blue", shape = 24)  + xlim(0,1)
Pl_mod2_with_initial_data <- Pl_mod2_with_initial_data_no_test
# Model_3 ##############################
new_data3 <- myt2 %>% group_by(Subset,  Sp) %>% do(data.frame(freq_MT = seq(min(.$freq_MT), max(.$freq_MT), length.out = 100)))
new_data3$eta <- predict(Model_3_final, newdata = new_data2,  re.form = NA)
X <- model.matrix(~freq_MT* Subset , data = new_data3)
new_data3$SE_eta <- sqrt(diag(X %*% vcov(Model_3_final) %*% t(X)))
new_data3$fit <- logit_back(new_data3$eta)
new_data3$lwr <- logit_back(new_data3$eta -  1.96 *new_data3$SE_eta)
new_data3$upr <- logit_back(new_data3$eta +  1.96 *new_data3$SE_eta)
Pl_mod3 <-  ggplot(new_data3, aes(x = freq_MT, y = fit)) + geom_line(linetype = 2,  size = 1) + geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.1) + facet_wrap(~Subset)  + xlim(0, 1) + ylim(0, 1) + scale_color_manual(values=c("blue", "red")) + guides(color = "none") +  geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1)
accuracy <- myt2 %>% group_by(Subset, pop) %>% summarize(freq_MT = mean(freq_MT), Accur = mean(congr), N = n())
Pl_mod3_with_initial_data_no_test <- Pl_mod3 + geom_point(data = accuracy, aes(x = freq_MT, y = Accur, size = N),  shape = 21, fill = "gray") + scale_fill_continuous(high = "black", low = "white" ) + labs(x = "Proportion of M.trossulus", y = "Proportion of correct \nidentification")  + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) + geom_hline(yintercept = 0.5)
#
# test_Model_3 <- myt3 %>% group_by(Subset, pop) %>% summarize(freq_MT = mean(freq_MT), Accur = mean(congr), N = n())
#
# Pl_mod3_with_initial_data <- Pl_mod3_with_initial_data_no_test + geom_point(data = test_Model_3, aes(x = freq_MT, y = Accur, size = N),  shape = 24, fill = "red")
Pl_mod3_with_initial_data <- Pl_mod3_with_initial_data_no_test
# Model_4 ##############################
new_data4 <- myt2 %>% group_by(Subset, morph) %>% do(data.frame(freq_MT = seq(min(.$freq_MT), max(.$freq_MT), length.out = 100)))
# Предсказанные значеня в шкале вероятностей
new_data4$fit <- predict(Model_4_final, newdata = new_data4, type = "response", re.form = NA)
# Предсказанные значеня в шкале логитов
new_data4$fit_eta <- predict(Model_4_final, newdata = new_data4, re.form = NA)
# Вычисление доверительного инеравала
X <- model.matrix(  ~ morph * freq_MT * Subset, data = new_data4) #Модельная матрица для визуализации
# Ошибки в шкале логитов
new_data4$se_eta <- sqrt(diag(X %*% vcov(Model_4_final) %*% t(X)))
new_data4$lwr <- logit_back(new_data4$fit_eta - 1.96 * new_data4$se_eta)
new_data4$upr <- logit_back(new_data4$fit_eta + 1.96 * new_data4$se_eta)
Pl_mod4 <- ggplot(new_data4, aes(x = freq_MT)) +
geom_ribbon(aes(ymin = lwr, ymax = upr, group = morph), alpha = 0.1)  +
geom_line(aes(y = fit, color = morph), size=1, linetype = 2) +
geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = freq_MT), size = 0.1) +
scale_color_manual(values = c("blue", "red")) +
scale_fill_manual(values = c("blue", "red"))  +
xlim(0,1)  +
facet_wrap( ~ Subset)
pr_value_M <- myt2 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_T = sum(ind == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_E = sum(ind == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
pr_value_M$PMT_T <- with(pr_value_M, N_T_MT / N_T)
pr_value_M$PMT_E <- with(pr_value_M, N_E_MT / N_T)
pr_value_M$PME_E <- with(pr_value_M, N_E_ME / N_E)
pr_value_M$PME_T <- with(pr_value_M, N_T_ME / N_E)
Pl_mod4_with_initial_data_no_test <- Pl_mod4 + geom_segment(data = pr_value_M, aes(x = freq_MT, y = PME_E, xend = freq_MT, yend = PMT_T), color="darkgrey") +
geom_hline(data = pr_value_M, aes(yintercept=0.5), color="black") +
geom_point(data = pr_value_M, aes(y = PME_E, size= N_E), fill = "white", shape = 21) +
geom_point(data = pr_value_M, aes(y = PMT_T, size=N_T), fill = "black", shape = 21) +
labs(y =  "P(edu|E)\nP(tros|T)", x = "Ptros", fill = "")+
ylim(0,1) +
xlim(0,1)
# +
#   theme(strip.background = element_blank(), strip.text = element_blank())
# test_Model_4 <- myt3 %>% group_by(Subset, pop) %>% summarise(freq_MT = mean(freq_MT), N_T = sum(ind == 1),  N_T_MT = sum(Sp2 == 1 & ind == 1), N_E_MT = sum(Sp2 == 1 & ind == 0), N_E = sum(ind == 0), N_E_ME = sum(Sp2 == 0 & ind == 0), N_T_ME = sum(Sp2 == 0 & ind == 1))
#
# test_Model_4$PMT_T <- with(test_Model_4, N_T_MT / N_T)
# test_Model_4$PMT_E <- with(test_Model_4, N_E_MT / N_T)
# test_Model_4$PME_E <- with(test_Model_4, N_E_ME / N_E)
# test_Model_4$PME_T <- with(test_Model_4, N_T_ME / N_E)
#
# Pl_mod4_with_initial_data <- Pl_mod4_with_initial_data_no_test + geom_point(data = test_Model_4, aes(y = PME_E, size= N_E), fill = "red", shape = 24) +  geom_point(data = test_Model_4, aes(y = PMT_T, size=N_T), fill = "blue", shape = 24)
Pl_mod4_with_initial_data <- Pl_mod4_with_initial_data_no_test
# Model_5 ##############################
new_data5 <- myt2 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(Prop_T) ) %>% group_by(Subset) %>%  do(data.frame(Prop_T = seq(min(.$Prop_T), max(.$Prop_T), length.out = 10)))
predicted5 <- predict(Model_5_final, newdata = new_data5,  type="response", se.fit = T)
new_data5$fit <- predicted5$fit
new_data5$SE <- predicted5$se.fit
Pl_mod5 <- ggplot(new_data5, aes(x = Prop_T, y = fit)) + geom_line(linetype = 2, color = "red", size = 1) + facet_wrap(~Subset) + geom_ribbon(aes(ymin = fit - 1.96*SE, ymax = fit + 1.96*SE), alpha = 0.1) + xlim(0, 1) + ylim(0, 1) +  geom_rug(data = myt2, inherit.aes = FALSE,  aes(x = Prop_T), size = 0.1) + geom_abline()
init_data_Model_5 <- myt2 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(morph == "T_m"),  freq_MT = mean(Sp == "M.trossulus"), N = n())
Pl_mod5_with_initial_data_no_test <- Pl_mod5 + geom_point(data = init_data_Model_5, aes( y = freq_MT, size = N), shape = 21, fill = "gray" ) + scale_fill_continuous(low = "white", high = "black") + labs(x = "PT", y = "Ptros \n")
#  test_Model_5 <- myt3 %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(morph == "T_m"),  freq_MT = mean(Sp == "M.trossulus"), N = n())
#
# Pl_mod5_with_initial_data <- Pl_mod5_with_initial_data_no_test + geom_point(data = test_Model_5, aes( y = freq_MT, size = N, fill = freq_MT), shape = 24, fill = "red" )
#
Pl_mod5_with_initial_data <- Pl_mod5_with_initial_data_no_test
#### В этом чанке вычисляются  значения P(T|tros) P(E|edu), предсказанные для Ptos=0.5
new_data_ptros_05_model_2 <- expand.grid(Sp = c("M.trossulus", "M.edulis"), Subset = c("WS", "BL", "BH"), freq_MT = 0.5)
new_data_ptros_05_model_2$eta <- predict(Model_2_final, newdata = new_data_ptros_05_model_2,  re.form = NA)
X <- model.matrix(~freq_MT * Subset * Sp, data = new_data_ptros_05_model_2)
new_data_ptros_05_model_2$SE_eta <- sqrt(diag(X %*% vcov(Model_2_final) %*% t(X)))
new_data_ptros_05_model_2$fit <- logit_back(new_data_ptros_05_model_2$eta)
new_data_ptros_05_model_2$lwr <- logit_back(new_data_ptros_05_model_2$eta -  1.96 *new_data_ptros_05_model_2$SE_eta)
new_data_ptros_05_model_2$upr <- logit_back(new_data_ptros_05_model_2$eta +  1.96 *new_data_ptros_05_model_2$SE_eta)
new_data_ptros_05_model_2$CI <- logit_back(1.96 *new_data_ptros_05_model_2$SE_eta)
#### Все то же самое,  P(T|tros) P(E|edu), предсказанные для Ptos=0
new_data_ptros_0_model_2 <- expand.grid(Sp = c("M.trossulus", "M.edulis"), Subset = c("WS", "BL", "BH"), freq_MT = 0)
new_data_ptros_0_model_2$eta <- predict(Model_2_final, newdata = new_data_ptros_0_model_2,  re.form = NA)
X <- model.matrix(~freq_MT * Subset * Sp  , data = new_data_ptros_0_model_2)
new_data_ptros_0_model_2$SE_eta <- sqrt(diag(X %*% vcov(Model_2_final) %*% t(X)))
new_data_ptros_0_model_2$fit <- logit_back(new_data_ptros_0_model_2$eta)
new_data_ptros_0_model_2$lwr <- logit_back(new_data_ptros_0_model_2$eta -  1.96 *new_data_ptros_0_model_2$SE_eta)
new_data_ptros_0_model_2$upr <- logit_back(new_data_ptros_0_model_2$eta +  1.96 *new_data_ptros_0_model_2$SE_eta)
new_data_ptros_0_model_2$CI <- logit_back(1.96 *new_data_ptros_0_model_2$SE_eta)
#### Все то же самое,  P(T|tros) P(E|edu), предсказанные для Ptos=1
new_data_ptros_1_model_2 <- expand.grid(Sp = c("M.trossulus", "M.edulis"), Subset = c("WS", "BL", "BH"), freq_MT = 1)
new_data_ptros_1_model_2$eta <- predict(Model_2_final, newdata = new_data_ptros_1_model_2,  re.form = NA)
X <- model.matrix(~freq_MT * Subset * Sp , data = new_data_ptros_1_model_2)
new_data_ptros_1_model_2$SE_eta <- sqrt(diag(X %*% vcov(Model_2_final) %*% t(X)))
new_data_ptros_1_model_2$fit <- logit_back(new_data_ptros_1_model_2$eta)
new_data_ptros_1_model_2$lwr <- logit_back(new_data_ptros_1_model_2$eta -  1.96 *new_data_ptros_1_model_2$SE_eta)
new_data_ptros_1_model_2$upr <- logit_back(new_data_ptros_1_model_2$eta +  1.96 *new_data_ptros_1_model_2$SE_eta)
new_data_ptros_1_model_2$CI <- logit_back(1.96 *new_data_ptros_1_model_2$SE_eta)
# new_data_ptros_1_model_2$fit - new_data_ptros_0_model_2$fit
#### В этом чанке вычисляются  значения P(T|tros) P(E|edu), предсказанные для Ptos=0.5
new_data_ptros_05_model_8 <- expand.grid(Sp = c("M.trossulus", "M.edulis"), Subset = c("WSBL", "BH", "GOM", "BALT", "NORW"), freq_MT = 0.5)
new_data_ptros_05_model_8$eta <- predict(Model_8_final, newdata = new_data_ptros_05_model_8,  re.form = NA)
X <- model.matrix(~freq_MT * Subset * Sp, data = new_data_ptros_05_model_8)
new_data_ptros_05_model_8$SE_eta <- sqrt(diag(X %*% vcov(Model_8_final) %*% t(X)))
new_data_ptros_05_model_8$fit <- logit_back(new_data_ptros_05_model_8$eta)
new_data_ptros_05_model_8$lwr <- logit_back(new_data_ptros_05_model_8$eta -  1.96 *new_data_ptros_05_model_8$SE_eta)
new_data_ptros_05_model_8$upr <- logit_back(new_data_ptros_05_model_8$eta +  1.96 *new_data_ptros_05_model_8$SE_eta)
new_data_ptros_05_model_8$CI <- logit_back(1.96 *new_data_ptros_05_model_8$SE_eta)
#### Все то же самое,  P(T|tros) P(E|edu), предсказанные для Ptos=0
new_data_ptros_0_model_8 <- expand.grid(Sp = c("M.trossulus", "M.edulis"), Subset = c("WSBL", "BH", "GOM", "BALT", "NORW"), freq_MT = 0)
new_data_ptros_0_model_8$eta <- predict(Model_8_final, newdata = new_data_ptros_0_model_8,  re.form = NA)
X <- model.matrix(~freq_MT * Subset * Sp  , data = new_data_ptros_0_model_8)
new_data_ptros_0_model_8$SE_eta <- sqrt(diag(X %*% vcov(Model_8_final) %*% t(X)))
new_data_ptros_0_model_8$fit <- logit_back(new_data_ptros_0_model_8$eta)
new_data_ptros_0_model_8$lwr <- logit_back(new_data_ptros_0_model_8$eta -  1.96 *new_data_ptros_0_model_8$SE_eta)
new_data_ptros_0_model_8$upr <- logit_back(new_data_ptros_0_model_8$eta +  1.96 *new_data_ptros_0_model_8$SE_eta)
new_data_ptros_0_model_8$CI <- logit_back(1.96 *new_data_ptros_0_model_8$SE_eta)
#### Все то же самое,  P(T|tros) P(E|edu), предсказанные для Ptos=1
new_data_ptros_1_model_8 <- expand.grid(Sp = c("M.trossulus", "M.edulis"), Subset = c("WSBL", "BH", "GOM", "BALT", "NORW"), freq_MT = 1)
new_data_ptros_1_model_8$eta <- predict(Model_8_final, newdata = new_data_ptros_1_model_8,  re.form = NA)
X <- model.matrix(~freq_MT * Subset * Sp , data = new_data_ptros_1_model_8)
new_data_ptros_1_model_8$SE_eta <- sqrt(diag(X %*% vcov(Model_8_final) %*% t(X)))
new_data_ptros_1_model_8$fit <- logit_back(new_data_ptros_1_model_8$eta)
new_data_ptros_1_model_8$lwr <- logit_back(new_data_ptros_1_model_8$eta -  1.96 *new_data_ptros_1_model_8$SE_eta)
new_data_ptros_1_model_8$upr <- logit_back(new_data_ptros_1_model_8$eta +  1.96 *new_data_ptros_1_model_8$SE_eta)
new_data_ptros_1_model_8$CI <- logit_back(1.96 *new_data_ptros_1_model_8$SE_eta)
# new_data_ptros_1_model_8$fit - new_data_ptros_0_model_8$fit
# grid.arrange(Pl_mod1_with_initial_data ,
#              Pl_mod2_with_initial_data + theme(strip.text = element_blank()),
#              Pl_mod4_with_initial_data+ theme(strip.text = element_blank()) ,
#              ncol = 1)
# Pl_mod3_with_initial_data + theme(strip.text = element_blank()),
grid.arrange(Pl_mod1_with_initial_data_no_test ,
Pl_mod2_with_initial_data_no_test + theme(strip.text = element_blank()),
Pl_mod4_with_initial_data_no_test + theme(strip.text = element_blank()) ,
ncol = 1)
# residuals(Model_2_final)
Model_2_final_diagn <- fortify(Model_2_final)
Model_2_final
lme4::fortify(Model_2_final)
fortify(Model_2_final)
Model_2_final
ggplot2::fortify(Model_2_final)
residuals(Model_2_final)
fortify.merMod(Model_2_final)
# residuals(Model_2_final)
Model_2_final_diagn <- fortify.merMod(Model_2_final)
resid_siz <- merge(myt2, Model_2_final_diagn)
resid_siz <- resid_siz[!is.na(resid_siz$siz), ]
resid_cor <- resid_siz %>% group_by(Subset, pop) %>% summarise(cor = cor.test(.scresid, size, method = "pearson")$estimate, p = cor.test(.scresid, size, method = "pearson")$p.value)
resid_cor
resid_cor$p_adj <- p.adjust(resid_cor$p, method = "hochberg")
# residuals(Model_4_final)
Model_4_final_diagn <- fortify(Model_4_final)
# residuals(Model_4_final)
Model_4_final_diagn <- fortify.merMod(Model_4_final)
resid_siz2 <- merge(myt2, Model_4_final_diagn)
resid_siz2 <- resid_siz2[!is.na(resid_siz2$siz), ]
ggplot(resid_siz2, aes(x = size, y = .scresid)) + geom_point() + geom_smooth()
resid_cor2 <- resid_siz2 %>% group_by(Subset, pop) %>% summarise(cor = cor.test(.scresid, size, method = "pearson")$estimate, p = cor.test(.scresid, size, method = "pearson")$p.value)
resid_cor2$p_adj <- p.adjust(resid_cor2$p, method = "hochberg")
# residuals(Model_6_final)
Model_6_final_diagn <- fortify(Model_6_final)
# residuals(Model_6_final)
Model_6_final_diagn <- fortify.merMod(Model_6_final)
resid_siz2 <- merge(myt2_reduced, Model_6_final_diagn)
resid_siz2 <- resid_siz2[!is.na(resid_siz2$siz), ]
resid_cor2 <- resid_siz2 %>% group_by(Subset, pop) %>% summarise(cor = cor.test(.scresid, size, method = "pearson")$estimate, p = cor.test(.scresid, size, method = "pearson")$p.value)
resid_cor2$p_adj <- p.adjust(resid_cor2$p, method = "hochberg")
myt2_all$pop <- factor(myt2_all$pop)
myt2_all$Subset <- factor(myt2_all$Subset)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros$pop <- factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
model
size_models_tros
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros
size_models_tros
size_models_tros
size_models_tros$pop <- factor(size_models_tros$pop)
size_models_tros
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros %>% tidyr::(model)
size_models_tros %>% broom::tidy(model)
size_models_tros %>% tidy(model)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros_res <- size_models_tros %>% tidy(.)
size_models_tros_res <- size_models_tros %>% broom::tidy(model)
size_models_tros
str(size_models_tros)
lirary(broom)
library(broom)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros
size_models_tros_res <- size_models_tros %>% group_by(pop) %>% tidy(model)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros
size_models_tros$pop
size_models_tros$model
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros$pop <- factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
tidy( size_models_tros$model)
tidy( size_models_tros$model[1])
size_models_tros$model[1]
tidy( size_models_tros$model[[1]])
tidy( size_models_tros$model[[42]])
size_models_tros_res <-  tidy(size_models_tros$model[[1:10]])
size_models_tros_res
size_models_tros$model[[1:10]]
size_models_tros_res <-  tidy(size_models_tros$model[[1]])
size_models_tros_res
size_models_tros_res <-  tidy(x = size_models_tros$model)
size_models_tros$model
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros$pop <- factor(size_models_tros$pop)
size_models_tros_res <-  tidy(x = size_models_tros$model)
size_models_tros_res <-  tidy(x = size_models_tros$model[[1]])
size_models_tros_res <-  tidy(x = size_models_tros$model[[55]])
size_models_tros_res
size_models_tros_res <-  tidy(size_models_tros$model[[55]])
size_models_tros$pop <- factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
is.factor(size_models_tros$pop)
unique(size_models_tros$pop)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros_res <- size_models_tros %>% tidy(model)
detach(broom.mixed)
detach("broom.mixed")
detach("package:broom.mixed", unload = TRUE)
detach("package:broom", unload = TRUE)
library(broom)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros$pop <- factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
library(broom.mixed)
size_models_tros_res <- size_models_tros %>% tidy.glm(model)
size_models_tros_res <- size_models_tros %>% broom::tidy.glm(model)
size_models_tros_res <- size_models_tros %>% broom::tidy(model)
size_models_tros_res <- size_models_tros %>% broom::augment(model)
size_models_tros_res <- size_models_tros %>% broom::augment(x = model)
size_models_tros_res <- size_models_tros %>% broom::augment(x = .$model)
size_models_tros_res <- size_models_tros %>% tidy(x = .$model)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros$pop <- as.factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros$pop <- as.character(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros$pop <- as.factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>% tidy(model)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros$pop <- as.factor(size_models_tros$pop)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros
size_models_tros_res <- size_models_tros %>% unlist() %>% tidy(model)
size_models_tros_res <- size_models_tros %>%  tidy(model)
size_models_edu <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.edulis") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_edu$pop <- factor(size_models_edu$pop)
size_models_edu_res <- size_models_edu %>% tidy(model)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
install.packages("tidyverse")
library(tidyverse)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_tros$pop <- as.factor(size_models_tros$pop)
size_models_tros_res <- size_models_tros %>%  tidy(model)
library(broom)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(tidy(glm(ind ~  size, family = "binomial", data = .)))
size_models_tros
View(size_models_tros)
myt2_all$pop <- factor(myt2_all$pop)
myt2_all$Subset <- factor(myt2_all$Subset)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(tidy(glm(ind ~  size, family = "binomial", data = .)))
size_models_tros_res$p.value <- round(size_models_tros_res$p.value, 4)
size_models_tros_res
myt2_all$pop <- factor(myt2_all$pop)
myt2_all$Subset <- factor(myt2_all$Subset)
size_models_tros <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(tidy(glm(ind ~  size, family = "binomial", data = .)))
size_models_tros_res <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.trossulus") %>% do(tidy(glm(ind ~  size, family = "binomial", data = .)))
size_models_tros_res$p.value <- round(size_models_tros_res$p.value, 4)
size_models_tros_res
size_models_res_tros_slope <- size_models_tros_res[size_models_tros_res$term != "(Intercept)", ]
size_models_res_tros_slope$p_adj <- p.adjust(size_models_res_tros_slope$p.value, method = "hochberg")
size_models_res_tros_slope
size_models_edu <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.edulis") %>% do(model = glm(ind ~  size, family = "binomial", data = .))
size_models_edu$pop <- factor(size_models_edu$pop)
size_models_edu_res <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.edulis") %>% do(tody(glm(ind ~  size, family = "binomial", data = .)))
size_models_edu_res <- myt2_all  %>% group_by(pop)%>% filter(Sp == "M.edulis") %>% do(tidy(glm(ind ~  size, family = "binomial", data = .)))
size_models_edu$pop <- factor(size_models_edu$pop)
size_models_edu_res <- size_models_edu %>% tidy(model)
size_models_edu_res$p.value <- round(size_models_edu_res$p.value, 4)
size_models_res_edu_slope <- size_models_edu_res[size_models_edu_res$term != "(Intercept)", ]
size_models_res_edu_slope$p_adj <- p.adjust(size_models_res_edu_slope$p.value, method = "hochberg")
size_models_res_edu_slope$p.value <- round(size_models_res_edu_slope$p.value, 4)
lazy_calc_data <- read.table("Data/ptros by pt 260620.csv", geader = T, sep = ",")
lazy_calc_data <- read.table("Data/ptros by pt 260620.csv", header = T, sep = ",")
lazy_calc_data
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set)
library(lme4)
library(ggplot2)
library(reshape2)
library(sjstats)
library(dplyr)
library(car)
library(doBy)
library(pROC)
library(betareg)
library(lmtest)
library(tidyverse)
library(broom)
library(broom.mixed) #Пакет для вытаскивания информации из объектов MerMod
library(MuMIn)
library(gridExtra)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F) + geom_abline()
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = T) + geom_abline()
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F) + geom_abline()
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F) + geom_abline() + ylim(0,1)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F) + geom_abline() + ylim(0,1) + xlim(0,1)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F, color = "black") + geom_abline() + ylim(0, 1) + xlim(0, 1)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F, color = "black") + geom_abline(linetype = 2) + ylim(0, 1) + xlim(0, 1)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = T, color = "black") + geom_abline(linetype = 2) + ylim(0, 1) + xlim(0, 1)
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F, color = "black") + geom_abline(linetype = 2) + ylim(0, 1) + xlim(0, 1)
lazy_calc_data$Set <-  factor(lazy_calc_data$Set, levels = c("WS" , "BL", "BH", "NORW", "BALT", "SCOT", "GOM" ))
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F, color = "black") + geom_abline(linetype = 2) + ylim(0, 1) + xlim(0, 1)
lazy_calc_data <- read.table("Data/ptros by pt 260620.csv", header = T, sep = ",")
lazy_calc_data$Set <-  factor(lazy_calc_data$Set, levels = c("WS" , "BL", "BH", "NORW", "BALT", "SCOT", "GOM" ))
ggplot(lazy_calc_data, aes(x = Ptros, y = Ptros_eq3)) + geom_point() + facet_wrap(~Set) + geom_smooth(method = "lm", se = F, color = "black") + geom_abline(linetype = 2) + ylim(0, 1) + xlim(0, 1) + labs(x = "Ptros observed", y = "Ptros predicted")
library(lme4)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(lme4)
library(ggplot2)
library(reshape2)
