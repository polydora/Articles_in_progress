donat_max_mix_WBL <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_WBL, ])
donat_max_mix_BH <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_BH, ])
donat_max_mix_GOM <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_GOM, ])
donat_max_mix_BALT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_BALT, ])
# donat_max_mix_SCOT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_SCOT, ])
donat_max_mix_NORW <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_NORW, ])
donat_max_mix_SCOT <- donat(myt2_all[myt2_all$Subset == "SCOT", ]) #При малом количесвте выборок бублик считаем по всем сборам
# donat_max_mix_NORW <- donat(df = myt2_all[myt2_all$Subset == "NORW", ]) #При малом количесвте выборок бублик считаем по всем сборам
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif_WBL <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_WBL, ])
donat_max_dif_BH <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_BH, ])
donat_max_dif_GOM <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_GOM, ])
donat_max_dif_BALT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_BALT, ])
# donat_max_dif_SCOT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_SCOT, ])
donat_max_dif_NORW <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_NORW, ])
donat_max_dif_SCOT <- donat(df = myt2_all[myt2_all$Subset == "SCOT", ]) #При малом количесвте выборок бублик считаем по всем сборам
# donat_max_dif_NORW <- donat(df = myt2_all[myt2_all$Subset == "NORW", ]) #При малом количесвте выборок бублик считаем по всем сборам
#Предсказания калькулятора 2 на основе наиболее смешанных популяций
calc2_WBL <- calc2(donat_max_mix_WBL[1], donat_max_mix_WBL[2])
calc2_BH <- calc2(donat_max_mix_BH[1], donat_max_mix_BH[2])
calc2_GOM <- calc2(donat_max_mix_GOM[1], donat_max_mix_GOM[2])
calc2_BALT <- calc2(donat_max_mix_BALT[1], donat_max_mix_BALT[2])
calc2_SCOT <- calc2(donat_max_mix_SCOT[1], donat_max_mix_SCOT[2])
calc2_NORW <- calc2(donat_max_mix_NORW[1], donat_max_mix_NORW[2])
calc2_WBL$Subset <- "WBL"
calc2_BH$Subset <- "BH"
calc2_GOM$Subset <- "GOM"
calc2_BALT$Subset <- "BALT"
calc2_SCOT$Subset <- "SCOT"
calc2_NORW$Subset <- "NORW"
calc2_predictions <- rbind(calc2_WBL, calc2_BH, calc2_GOM, calc2_BALT, calc2_SCOT, calc2_NORW)
calc2_predictions$Subset <- factor(calc2_predictions$Subset, levels = levels(myt2_all$Subset))
#Предсказания калькулятора 1 на основе наиболее различных популяций
calc1_WBL <- calc1(donat_max_dif_WBL[1], donat_max_dif_WBL[2])
calc1_BH <- calc1(donat_max_dif_BH[1], donat_max_dif_BH[2])
calc1_GOM <- calc1(donat_max_dif_GOM[1], donat_max_dif_GOM[2])
calc1_BALT <- calc1(donat_max_dif_BALT[1], donat_max_dif_BALT[2])
calc1_SCOT <- calc1(donat_max_dif_SCOT[1], donat_max_dif_SCOT[2])
calc1_NORW <- calc1(donat_max_dif_NORW[1], donat_max_dif_NORW[2])
calc1_WBL$Subset <- "WBL"
calc1_BH$Subset <- "BH"
calc1_GOM$Subset <- "GOM"
calc1_BALT$Subset <- "BALT"
calc1_SCOT$Subset <- "SCOT"
calc1_NORW$Subset <- "NORW"
calc1_predictions <- rbind(calc1_WBL, calc1_BH, calc1_GOM, calc1_BALT, calc1_SCOT, calc1_NORW)
calc1_predictions$Subset <- factor(calc1_predictions$Subset, levels = levels(myt2_all$Subset))
# Chunk 20
## Калькулятор основан на объединении всех имеющихся данных
all_pop <- function(df = myt2, Subset = "W", ...) {
require(dplyr)
df = df[df$Subset %in% Subset, ]
pops <- unique(df$pop)
pops
}
pops_max_dif_WBL <- all_pop(df = myt2_all, Subset = "WBL")
pops_max_dif_BH <- all_pop(df = myt2_all, Subset = "BH")
pops_max_dif_GOM <- all_pop(df = myt2_all, Subset = "GOM")
pops_max_dif_BALT <- all_pop(df = myt2_all, Subset = "BALT")
pops_max_dif_SCOT <- all_pop(df = myt2_all, Subset = "SCOT")
pops_max_dif_NORW <- all_pop(df = myt2_all, Subset = "NORW")
pops_max_mix_WBL <- all_pop(df = myt2_all, Subset = "WBL")
pops_max_mix_BH <- all_pop(df = myt2_all, Subset = "BH")
pops_max_mix_GOM <- all_pop(df = myt2_all, Subset = "GOM")
pops_max_mix_BALT <- all_pop(df = myt2_all, Subset = "BALT")
pops_max_mix_SCOT <- all_pop(df = myt2_all, Subset = "SCOT")
pops_max_mix_NORW <- all_pop(df = myt2_all, Subset = "NORW")
# Бублики для наиболее смешанных популяций
donat_max_mix_WBL <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_WBL, ])
donat_max_mix_BH <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_BH, ])
donat_max_mix_GOM <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_GOM, ])
donat_max_mix_BALT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_BALT, ])
# donat_max_mix_SCOT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_SCOT, ])
donat_max_mix_NORW <- donat(df = myt2_all[myt2_all$pop %in% pops_max_mix_NORW, ])
donat_max_mix_SCOT <- donat(myt2_all[myt2_all$Subset == "SCOT", ]) #При малом количесвте выборок бублик считаем по всем сборам
# donat_max_mix_NORW <- donat(df = myt2_all[myt2_all$Subset == "NORW", ]) #При малом количесвте выборок бублик считаем по всем сборам
# Бублики для наиболее различных по стуртуре популяций
donat_max_dif_WBL <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_WBL, ])
donat_max_dif_BH <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_BH, ])
donat_max_dif_GOM <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_GOM, ])
donat_max_dif_BALT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_BALT, ])
# donat_max_dif_SCOT <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_SCOT, ])
donat_max_dif_NORW <- donat(df = myt2_all[myt2_all$pop %in% pops_max_dif_NORW, ])
donat_max_dif_SCOT <- donat(df = myt2_all[myt2_all$Subset == "SCOT", ]) #При малом количесвте выборок бублик считаем по всем сборам
# donat_max_dif_NORW <- donat(df = myt2_all[myt2_all$Subset == "NORW", ]) #При малом количесвте выборок бублик считаем по всем сборам
#Предсказания калькулятора 2 на основе наиболее смешанных популяций
calc2_WBL_bad <- calc2(donat_max_mix_WBL[1], donat_max_mix_WBL[2])
calc2_BH_bad <- calc2(donat_max_mix_BH[1], donat_max_mix_BH[2])
calc2_GOM_bad <- calc2(donat_max_mix_GOM[1], donat_max_mix_GOM[2])
calc2_BALT_bad <- calc2(donat_max_mix_BALT[1], donat_max_mix_BALT[2])
calc2_SCOT_bad <- calc2(donat_max_mix_SCOT[1], donat_max_mix_SCOT[2])
calc2_NORW_bad <- calc2(donat_max_mix_NORW[1], donat_max_mix_NORW[2])
calc2_WBL_bad$Subset <- "WBL"
calc2_BH_bad$Subset <- "BH"
calc2_GOM_bad$Subset <- "GOM"
calc2_BALT_bad$Subset <- "BALT"
calc2_SCOT_bad$Subset <- "SCOT"
calc2_NORW_bad$Subset <- "NORW"
calc2_predictions_bad <- rbind(calc2_WBL_bad, calc2_BH_bad, calc2_GOM_bad, calc2_BALT_bad, calc2_SCOT_bad, calc2_NORW_bad)
calc2_predictions_bad$Subset <- factor(calc2_predictions_bad$Subset, levels = levels(myt2_all$Subset))
#Предсказания калькулятора 1 на основе наиболее различных популяций
calc1_WBL_bad <- calc1(donat_max_dif_WBL[1], donat_max_dif_WBL[2])
calc1_BH_bad <- calc1(donat_max_dif_BH[1], donat_max_dif_BH[2])
calc1_GOM_bad <- calc1(donat_max_dif_GOM[1], donat_max_dif_GOM[2])
calc1_BALT_bad <- calc1(donat_max_dif_BALT[1], donat_max_dif_BALT[2])
calc1_SCOT_bad <- calc1(donat_max_dif_SCOT[1], donat_max_dif_SCOT[2])
calc1_NORW_bad <- calc1(donat_max_dif_NORW[1], donat_max_dif_NORW[2])
calc1_WBL_bad$Subset <- "WBL"
calc1_BH_bad$Subset <- "BH"
calc1_GOM_bad$Subset <- "GOM"
calc1_BALT_bad$Subset <- "BALT"
calc1_SCOT_bad$Subset <- "SCOT"
calc1_NORW_bad$Subset <- "NORW"
calc1_predictions_bad <- rbind(calc1_WBL_bad, calc1_BH_bad, calc1_GOM_bad, calc1_BALT_bad, calc1_SCOT_bad, calc1_NORW_bad)
calc1_predictions_bad$Subset <- factor(calc1_predictions_bad$Subset, levels = levels(myt2_all$Subset))
# Chunk 21
Pl_mod6_with_initial_data_teor_calc2 <- Pl_mod6_with_initial_data +
geom_line(data = calc2_predictions, aes(x = freq_MT, y = P_MT_T), color = "red") +
geom_line(data = calc2_predictions, aes(x = freq_MT, y = P_ME_E), color = "blue")+
geom_line(data = calc2_predictions_bad, aes(x = freq_MT, y = P_MT_T), color = "green") +
geom_line(data = calc2_predictions, aes(x = freq_MT, y = P_ME_E), color = "green")
Pl_mod7_with_initial_data_teor_calc1 <- Pl_mod7_with_initial_data  +
geom_line(data = calc1_predictions, aes(x = P_T, y = Ptros), color = "darkgray", size = 1)+
geom_line(data = calc1_predictions_bad, aes(x = P_T, y = Ptros), color = "green", size = 1)
# Chunk 22
grid.arrange(Pl_mod7_with_initial_data_teor_calc1, Pl_mod8_with_initial_data,  Pl_mod6_with_initial_data_teor_calc2, ncol =3)
# Chunk 23: "Predictive values of morphotype test for all geographical regions"
new_data_mix <- expand.grid(morph = unique(myt2_reduced$morph), Subset = unique(myt2_reduced$Subset), freq_MT = 0.5 )
# Предсказанные значеня в шкале вероятностей
new_data_mix$fit <- predict(Model_6_final, newdata = new_data_mix, type = "response", re.form = NA)
# Предсказанные значеня в шкале логитов
new_data_mix$fit_eta <- predict(Model_6_final, newdata = new_data_mix, re.form = NA)
# Вычисление доверительного инеравала
# formula(Model_6_final)
X <- model.matrix(  ~ morph * freq_MT * Subset, data = new_data_mix) #Модельная матрица для визуализации
# Ошибки в шкале логитов
new_data_mix$se_eta <- sqrt(diag(X %*% vcov(Model_6_final) %*% t(X)))
new_data_mix$lwr <- logit_back(new_data_mix$fit_eta - 1.96 * new_data_mix$se_eta)
new_data_mix$upr <- logit_back(new_data_mix$fit_eta + 1.96 * new_data_mix$se_eta)
predict_Ptros_05 <- new_data_mix %>% select(-c(freq_MT, fit_eta, se_eta))
dd <- melt(predict_Ptros_05)
predict_Ptros_05_print <- dcast(dd, Subset ~ morph + variable, value.var = "value" )
predict_Ptros_05_print[,-1] <- round(predict_Ptros_05_print[,-1], 2)
predict_Ptros_05_print <- rbind(rep(NA, 7), predict_Ptros_05_print)
predict_Ptros_05_print[1,] <- c(NA, "Predicted", "Low", "Up", "Predicted", "Low", "Up")
kable(predict_Ptros_05_print, col.names = c("Subset", "P(edu|E)", "", "", "P(tros|T)", "", "" ), align = "rcccccc", caption = "Table ++. Predicted values of probability of correct species identification by mussel morphotype in mixed populations (Ptros = 0.5) in different geographical regions. Low and upper boundaries of 95% conficencal intervals are given for predicted values.")
# Реальные частоты M.trossulus среди T-морфотипа и реальные частоты T.edulis  среди E-морфотипа
myt2_all %>% group_by(Subset, morph) %>% summarise(P_trossulus = mean(Sp == "M.trossulus"), P_edulis = mean(Sp == "M.edulis")) %>% filter(morph == "E_m")
myt2_all %>% group_by(Subset, morph) %>% summarise(P_trossulus = mean(Sp == "M.trossulus"), P_edulis = mean(Sp == "M.edulis")) %>% filter(morph == "T_m")
# Chunk 24
# Accuracy assessment
level_prob <- 0.8 #Условная величина вероятности правильного определения, которая является приемлемой
# test_myt_3_Atlantic <- myt3_and_Atlantic %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(ind == 1)) %>% filter(! Subset %in% c( "SCOT"))
test_myt_3_Atlantic <- myt2_all %>% group_by(Subset, pop) %>% summarise(Prop_T = mean(ind == 1)) %>% filter(! Subset %in% c( "SCOT"))
test_myt_3_Atlantic$freq_MT_predicted <-  predict(Model_7_final, newdata = test_myt_3_Atlantic, type = "response")
# test_myt_3_Atlantic_2  <- myt3_and_Atlantic %>% select(Subset, pop, Sp, morph)%>% filter(! Subset %in% c("SCOT"))
test_myt_3_Atlantic_2  <- myt2_all %>% select(Subset, pop, Sp, morph)%>% filter(! Subset %in% c("SCOT"))
test_myt_3_Atlantic_3 <- merge(test_myt_3_Atlantic_2, test_myt_3_Atlantic)
test_myt_3_Atlantic_3$freq_MT <- test_myt_3_Atlantic_3$freq_MT_predicted
test_myt_3_Atlantic_3$Predicted_P_correct <- predict(Model_6_final, newdata = test_myt_3_Atlantic_3, type = "response" , re.form = NA)
test_myt_3_Atlantic_3$Congr_predicted <- ifelse(test_myt_3_Atlantic_3$Predicted_P_correct >= level_prob, 1, 0)
test_result <- test_myt_3_Atlantic_3 %>% group_by(Subset, morph) %>% summarise(Accuracy_T = round(mean( (morph == "T_m" & Sp == "M.trossulus" & Congr_predicted ==1) | (morph == "E_m" & Sp == "M.edulis" & Congr_predicted ==1) ), 2))
test_result <- dcast(test_result, Subset ~ morph, value.var = "Accuracy_T" )
# Chunk 25
kable(test_result, col.names = c("Region", "E-morphotype as M.edulis", "T-morphotype as M.trossulus"), caption = "Table +. Proportion of mussels correctly identified by morphotype test in different regions")
# Chunk 26
mixed_data <- myt2_all[myt2_all$Subset %in% c("WBL"), ]
n_pop <- length(unique(mixed_data$pop))
n_possible_pairs <- (n_pop^2 - n_pop)/2
Pl_teor_empir_Mod_7 <- ggplot(perms2(df = mixed_data, regr_model = Model_7_final), aes(x = Delta, y = Goodness)) + geom_point(size = 0.1) + geom_smooth(se = F) + labs(y = "Goodness \n")
# Pl_teor_empir_7 <- Pl_teor_empir_7 + ggtitle("Regression Model 8 \nvs Theoretical model Eq 3")
Pl_teor_empir_Mod_6 <- ggplot(perms4(df = mixed_data, regr_model = Model_6_final), aes(x = Delta, y = Goodness)) + geom_point(size = 0.1) + geom_smooth(se = F) + labs(y = "Goodness \n")
# Pl_teor_empir_6 <- Pl_teor_empir_6 + ggtitle("Regression Model 6 \nvs Theoretical model Eq 1, Eq 2")
# Chunk 27
grid.arrange(Pl_teor_empir_Mod_7, Pl_teor_empir_Mod_6, ncol = 2)
# Chunk 28
#
# Model_1_final_summary$Model <- "Model_1_final"
# Model_2_final_summary$Model <- "Model_2_final"
# Model_3_final_summary$Model <- "Model_3_final"
# Model_4_final_summary$Model <- "Model_4_final"
# Model_5_final_summary$Model <- "Model_5_final"
# Model_6_final_summary$Model <- "Model_6_final"
# Model_7_final_summary$Model <- "Model_7_final"
# Model_8_final_summary$Model <- "Model_8_final"
#
term_constructor <- function(include, Model = Model_6_final){
require(dplyr)
df = as.data.frame(fixef(Model))
names(df) <- "Value"
df %>% filter(row.names(.) %in% include) %>% summarise(sum(Value))
}
formula_constructor <- function(intrcept, b1){
signum <- ifelse(b1 < 0, " - ", " + ")
b1 <- ifelse(b1 < 0, b1*-1, b1)
paste0('$$P(edu|E) = \\frac{e^{', intercept, signum, b1, 'Ptros} }{1 + e^{', intercept, signum, b1, 'Ptros}}$$')
}
# WBL
intercept <- -2.4296771
b1 <- 5.4478252
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_7_WBL <- formula_constructor(intercept, b1)
# BH
intercept <- -2.4296771 + -1.4533000
b1 <- 5.4478252 + -0.4311163
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_7_BH <- formula_constructor(intercept, b1)
# GOM
intercept <- -2.4296771 + 0.1485715
b1 <- 5.4478252 + 0.7669863
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_7_GOM <- formula_constructor(intercept, b1)
# BALT
intercept <- -2.4296771 + 1.7843822
b1 <- 5.4478252 + 6.1480674
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_7_BALT <- formula_constructor(intercept, b1)
# NORW
intercept <- -2.4296771 + 1.9254190
b1 <- 5.4478252 + -1.7520192
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_7_NORW <- formula_constructor(intercept, b1)
# Chunk 29
# Для WBL E-morphotype
intercept <- term_constructor(c("(Intercept)"))
b1 <-  term_constructor(c("freq_MT"))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_WBL_E <-  formula_constructor(intercept, b1)
# paste0('$$P(edu|E) = \\frac{e^{', intercept, ' + ', b1, 'Ptros} }{1 + e^{', intercept, ' + ', b1, 'Ptros}}$$')
# Для WBL T-morphotype
intercept <- term_constructor(c("(Intercept)", "morphT_m"))
b1 <-  term_constructor(c("freq_MT", "morphT_m:freq_MT"))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_WBL_T <- formula_constructor(intercept, b1)
# Для BH E-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetBH" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetBH"))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_BH_E <- formula_constructor(intercept, b1)
# Для BH T-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetBH", "morphT_m:SubsetBH" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetBH", "morphT_m:freq_MT:SubsetBH" ))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_BH_T <- formula_constructor(intercept, b1)
# Для GOM E-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetGOM" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetGOM"))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_GOM_E <- formula_constructor(intercept, b1)
# Для GOM T-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetGOM", "morphT_m:SubsetGOM" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetGOM", "morphT_m:freq_MT:SubsetGOM" ))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_GOM_T <- formula_constructor(intercept, b1)
# Для BALT E-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetBALT" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetBALT"))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_BALT_E <- formula_constructor(intercept, b1)
# Для BALT T-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetBALT", "morphT_m:SubsetBALT" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetBALT", "morphT_m:freq_MT:SubsetBALT" ))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_BALT_T <- formula_constructor(intercept, b1)
# Для NORW E-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetNORW" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetNORW"))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_NORW_E <-formula_constructor(intercept, b1)
# Для BALT T-morphotype
intercept <- term_constructor(c("(Intercept)", "SubsetNORW", "morphT_m:SubsetNORW" ))
b1 <-  term_constructor(c("freq_MT", "freq_MT:SubsetNORW", "morphT_m:freq_MT:SubsetNORW" ))
intercept <- round(intercept, 1)
b1 <- round(b1, 1)
eq_Model_6_NORW_T <- formula_constructor(intercept, b1)
df_final$max_dif <- 0
Set
max_dif(df = myt2_all, Subset = Set)
max_mix_pop <- max_mix(df = myt2_all, Subset = Set)
max_mix_pop
df_final$max_mix [df_final$pop %in% max_mix_pop] <- 1
df_final
df <- myt2_all %>% filter(Subset == Set) %>% group_by(pop) %>% summarise(PT = mean(ind == 1), Ptros_obs = mean(Sp == "M.trossulus")) %>%
mutate(Ptros_Eq3 = Eq3(PT, get(paste("donat_max_dif_", Set, sep = "" ))),
P_MT_T_Eq1 = Eq1(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))),
P_ME_E_Eq2 = Eq2(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))))
df2 <- myt2_all %>% filter(Subset == Set, morph == "T_m") %>% group_by(pop) %>% summarise(P_MT_T_obs = mean(ind == 1 & Sp == "M.trossulus"))
df3 <- myt2_all %>% filter(Subset == Set, morph == "E_m") %>% group_by(pop) %>% summarise(P_ME_E_obs = mean(ind == 0 & Sp == "M.edulis"))
dd <- merge(df, df2, by = "pop")
ddd <- merge(dd, df3, by = "pop")
df_final <- ddd %>% select(pop, PT, Ptros_obs, P_MT_T_obs, P_ME_E_obs, Ptros_Eq3, P_MT_T_Eq1, P_ME_E_Eq2 )
df_final$max_mix <- 0
df_final$max_dif <- 0
max_dif_pop <- max_dif(df = myt2_all, Subset = Set)
max_mix_pop <- max_mix(df = myt2_all, Subset = Set)
df_final$max_dif [df_final$pop %in% max_dif_pop] <- 1
df_final$max_mix [df_final$pop %in% max_mix_pop] <- 1
df_final
max_mix(df = myt2_all, Subset = Set)
dd
df
df2 <- myt2_all %>% filter(Subset == Set, morph == "T_m") %>% group_by(pop) %>% summarise(P_MT_T_obs = mean(ind == 1 & Sp == "M.trossulus"))
df2
df3 <- myt2_all %>% filter(Subset == Set, morph == "E_m") %>% group_by(pop) %>% summarise(P_ME_E_obs = mean(ind == 0 & Sp == "M.edulis"))
df3
dd <- merge(df, df2)
dd
dd <- merge(df, df2, by.x = T)
dd <- merge(df, df2, by.x = pop)
dd
df
dd <- merge(df, df2, all = T)
dd
ddd <- merge(dd, df3, all = T)
ddd
df_final <- ddd %>% select(pop, PT, Ptros_obs, P_MT_T_obs, P_ME_E_obs, Ptros_Eq3, P_MT_T_Eq1, P_ME_E_Eq2 )
df_final$max_mix <- 0
df_final$max_dif <- 0
max_dif_pop <- max_dif(df = myt2_all, Subset = Set)
max_mix_pop <- max_mix(df = myt2_all, Subset = Set)
df_final$max_dif [df_final$pop %in% max_dif_pop] <- 1
df_final$max_mix [df_final$pop %in% max_mix_pop] <- 1
df_final
Pl_Eq3 <- ggplot(df_final, aes(y = Ptros_Eq3, x =  Ptros_obs)) + geom_point() + geom_abline()
Pl_Eq1 <- ggplot(df_final, aes(y = P_MT_T_Eq1, x = P_MT_T_obs )) + geom_point() + geom_abline()
Pl_Eq2 <- ggplot(df_final, aes(y = P_ME_E_Eq2, x = P_ME_E_obs )) + geom_point() + geom_abline()
Pl_Eq3
Pl_Eq1 <- ggplot(df_final, aes(y = P_MT_T_Eq1, x = P_MT_T_obs )) + geom_point() + geom_abline()
Pl_Eq1
Pl_Eq2 <- ggplot(df_final, aes(y = P_ME_E_Eq2, x = P_ME_E_obs )) + geom_point() + geom_abline()
Pl_Eq2
predict_obs_Eq123("GOM")
ddd
df_final
predict_obs_Eq123("GOM")[1]
predict_obs_Eq123 <- function(Set){
df <- myt2_all %>% filter(Subset == Set) %>% group_by(pop) %>% summarise(PT = mean(ind == 1), Ptros_obs = mean(Sp == "M.trossulus")) %>%
mutate(Ptros_Eq3 = Eq3(PT, get(paste("donat_max_dif_", Set, sep = "" ))),
P_MT_T_Eq1 = Eq1(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))),
P_ME_E_Eq2 = Eq2(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))))
df2 <- myt2_all %>% filter(Subset == Set, morph == "T_m") %>% group_by(pop) %>% summarise(P_MT_T_obs = mean(ind == 1 & Sp == "M.trossulus"))
df3 <- myt2_all %>% filter(Subset == Set, morph == "E_m") %>% group_by(pop) %>% summarise(P_ME_E_obs = mean(ind == 0 & Sp == "M.edulis"))
dd <- merge(df, df2, all = T)
ddd <- merge(dd, df3, all = T)
df_final <- ddd %>% select(pop, PT, Ptros_obs, P_MT_T_obs, P_ME_E_obs, Ptros_Eq3, P_MT_T_Eq1, P_ME_E_Eq2 )
df_final$max_mix <- 0
df_final$max_dif <- 0
max_dif_pop <- max_dif(df = myt2_all, Subset = Set)
max_mix_pop <- max_mix(df = myt2_all, Subset = Set)
df_final$max_dif [df_final$pop %in% max_dif_pop] <- 1
df_final$max_mix [df_final$pop %in% max_mix_pop] <- 1
Pl_Eq3 <- ggplot(df_final, aes(y = Ptros_Eq3, x =  Ptros_obs)) + geom_point() + geom_abline()
Pl_Eq1 <- ggplot(df_final, aes(y = P_MT_T_Eq1, x = P_MT_T_obs )) + geom_point() + geom_abline()
Pl_Eq2 <- ggplot(df_final, aes(y = P_ME_E_Eq2, x = P_ME_E_obs )) + geom_point() + geom_abline()
result <- list(df_final, Pl_Eq3, Pl_Eq1, Pl_Eq2)
result
}
predict_obs_Eq123("GOM")[1]
df_final$Set = Set
df_final
result <- list(df_final, Pl_Eq3, Pl_Eq1, Pl_Eq2)
data,frame(predict_obs_Eq123("GOM")[1])
data.frame(predict_obs_Eq123("GOM")[1])
rbind(predict_obs_Eq123("WBL")[1],
predict_obs_Eq123("BH")[1],
predict_obs_Eq123("GOM")[1],
predict_obs_Eq123("BALT")[1],
predict_obs_Eq123("NORW")[1]
)
predict_obs_Eq123("WBL")[1]
predict_obs_Eq123 <- function(Set){
df <- myt2_all %>% filter(Subset == Set) %>% group_by(pop) %>% summarise(PT = mean(ind == 1), Ptros_obs = mean(Sp == "M.trossulus")) %>%
mutate(Ptros_Eq3 = Eq3(PT, get(paste("donat_max_dif_", Set, sep = "" ))),
P_MT_T_Eq1 = Eq1(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))),
P_ME_E_Eq2 = Eq2(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))))
df2 <- myt2_all %>% filter(Subset == Set, morph == "T_m") %>% group_by(pop) %>% summarise(P_MT_T_obs = mean(ind == 1 & Sp == "M.trossulus"))
df3 <- myt2_all %>% filter(Subset == Set, morph == "E_m") %>% group_by(pop) %>% summarise(P_ME_E_obs = mean(ind == 0 & Sp == "M.edulis"))
dd <- merge(df, df2, all = T)
ddd <- merge(dd, df3, all = T)
df_final <- ddd %>% select(pop, PT, Ptros_obs, P_MT_T_obs, P_ME_E_obs, Ptros_Eq3, P_MT_T_Eq1, P_ME_E_Eq2 )
df_final$max_mix <- 0
df_final$max_dif <- 0
max_dif_pop <- max_dif(df = myt2_all, Subset = Set)
max_mix_pop <- max_mix(df = myt2_all, Subset = Set)
df_final$max_dif [df_final$pop %in% max_dif_pop] <- 1
df_final$max_mix [df_final$pop %in% max_mix_pop] <- 1
df_final$Set = Set
Pl_Eq3 <- ggplot(df_final, aes(y = Ptros_Eq3, x =  Ptros_obs)) + geom_point() + geom_abline()
Pl_Eq1 <- ggplot(df_final, aes(y = P_MT_T_Eq1, x = P_MT_T_obs )) + geom_point() + geom_abline()
Pl_Eq2 <- ggplot(df_final, aes(y = P_ME_E_Eq2, x = P_ME_E_obs )) + geom_point() + geom_abline()
result <- list(df_final, Pl_Eq3, Pl_Eq1, Pl_Eq2)
result
}
predict_obs_Eq123("WBL")[1]
rbind(predict_obs_Eq123("WBL")[1],
predict_obs_Eq123("BH")[1],
predict_obs_Eq123("GOM")[1],
predict_obs_Eq123("BALT")[1],
predict_obs_Eq123("NORW")[1]
)
predict_obs_Eq123("BH")[1]
predict_obs_Eq123("GOM")[1]
predict_obs_Eq123("BALT")[1]
predict_obs_Eq123("NORW")[1]
all_predictions <- rbind(predict_obs_Eq123("WBL")[1],
predict_obs_Eq123("BH")[1],
predict_obs_Eq123("GOM")[1],
predict_obs_Eq123("BALT")[1],
predict_obs_Eq123("NORW")[1]
)
all_predictions
WBL <- predict_obs_Eq123("WBL")[1]
BH <-  predict_obs_Eq123("BH")[1]
GOM <- predict_obs_Eq123("GOM")[1]
BALT <- predict_obs_Eq123("BALT")[1]
NORW <- predict_obs_Eq123("NORW")[1]
NORW
WBL <- as.data.frame(predict_obs_Eq123("WBL")[1])
WBL
BALT <- as.data.frame(predict_obs_Eq123("BALT")[1])
NORW <- as.data.frame(predict_obs_Eq123("NORW")[1])
rbind(WBL, BH, GOM, BALT, NORW)
WBL <- as.data.frame(predict_obs_Eq123("WBL")[1])
BH <-  as.data.frame(predict_obs_Eq123("BH")[1])
GOM <- as.data.frame(predict_obs_Eq123("GOM")[1])
BALT <- as.data.frame(predict_obs_Eq123("BALT")[1])
NORW <- as.data.frame(predict_obs_Eq123("NORW")[1])
rbind(WBL, BH, GOM, BALT, NORW)
all_obs_predict <- rbind(WBL, BH, GOM, BALT, NORW)
all_obs_predict
kable(all_obs_predict)
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set) + geom_point() + geom_abline()
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set)) + geom_point() + geom_abline()
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set)) + geom_point() + geom_abline()
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set)) + geom_point(size = 4) + geom_abline()
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom")
ggplot(all_obs_predict, aes(x = P_MT_T_obs, y = P_MT_T_Eq1, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom")
ggplot(all_obs_predict, aes(x = P_ME_E_obs, y = P_ME_E_Eq1, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom")
ggplot(all_obs_predict, aes(x = P_ME_E_obs, y = P_ME_E_Eq2, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom")
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom") + labs(x = "Ptros Observed", y = "Ptros predicted by Eq3")
ggplot(all_obs_predict, aes(x = P_ME_E_obs, y = P_ME_E_Eq2, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom") + labs(x = "P(edu|E) Observed", y = "P(edu|E) predicted by Eq2")
ggplot(all_obs_predict, aes(x = P_MT_T_obs, y = P_MT_T_Eq1, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom") + labs(x = "P(tros|T) Observed", y = "P(tros|T) predicted by Eq1")
kable(all_obs_predict,digits = 3)
Eq3 <- function(PT, donat){
P_E_edu <- 1 - donat[2]
P_T_tros <- donat[1]
# Ptros = (PT - (1 - P_E_edu))/ ((P_T_tros) -  (1 - P_E_edu))
Ptros = exp((PT - (1 - P_E_edu))/ ((P_T_tros) -  (1 - P_E_edu)))/(1+ exp((PT - (1 - P_E_edu))/ ((P_T_tros) -  (1 - P_E_edu))) )
# Ptros <- ifelse(Ptros <0 | Ptros >1 , NA, Ptros)
Ptros
}
Eq1 <- function(Ptros, donat){
P_T_MT <- donat[1]
P_T_ME <- donat[2]
P_MT_T <- (P_T_MT * Ptros)/(P_T_MT * Ptros + P_T_ME*(1-Ptros))
P_MT_T
}
Eq2 <- function(Ptros, donat){
P_T_MT <- donat[1]
P_T_ME <- donat[2]
P_ME_E <- ((1 - P_T_ME) * (1 - Ptros))/(1 - P_T_ME + Ptros * (P_T_ME - P_T_MT))
P_ME_E
}
predict_obs_Eq123 <- function(Set){
df <- myt2_all %>% filter(Subset == Set) %>% group_by(pop) %>% summarise(PT = mean(ind == 1), Ptros_obs = mean(Sp == "M.trossulus")) %>%
mutate(Ptros_Eq3 = Eq3(PT, get(paste("donat_max_dif_", Set, sep = "" ))),
P_MT_T_Eq1 = Eq1(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))),
P_ME_E_Eq2 = Eq2(Ptros_Eq3, get(paste("donat_max_mix_", Set, sep = "" ))))
df2 <- myt2_all %>% filter(Subset == Set, morph == "T_m") %>% group_by(pop) %>% summarise(P_MT_T_obs = mean(ind == 1 & Sp == "M.trossulus"))
df3 <- myt2_all %>% filter(Subset == Set, morph == "E_m") %>% group_by(pop) %>% summarise(P_ME_E_obs = mean(ind == 0 & Sp == "M.edulis"))
dd <- merge(df, df2, all = T)
ddd <- merge(dd, df3, all = T)
df_final <- ddd %>% select(pop, PT, Ptros_obs, P_MT_T_obs, P_ME_E_obs, Ptros_Eq3, P_MT_T_Eq1, P_ME_E_Eq2 )
df_final$max_mix <- 0
df_final$max_dif <- 0
max_dif_pop <- max_dif(df = myt2_all, Subset = Set)
max_mix_pop <- max_mix(df = myt2_all, Subset = Set)
df_final$max_dif [df_final$pop %in% max_dif_pop] <- 1
df_final$max_mix [df_final$pop %in% max_mix_pop] <- 1
df_final$Set = Set
Pl_Eq3 <- ggplot(df_final, aes(y = Ptros_Eq3, x =  Ptros_obs)) + geom_point() + geom_abline()
Pl_Eq1 <- ggplot(df_final, aes(y = P_MT_T_Eq1, x = P_MT_T_obs )) + geom_point() + geom_abline()
Pl_Eq2 <- ggplot(df_final, aes(y = P_ME_E_Eq2, x = P_ME_E_obs )) + geom_point() + geom_abline()
result <- list(df_final, Pl_Eq3, Pl_Eq1, Pl_Eq2)
result
}
WBL <- as.data.frame(predict_obs_Eq123("WBL")[1])
WBL
BH <-  as.data.frame(predict_obs_Eq123("BH")[1])
GOM <- as.data.frame(predict_obs_Eq123("GOM")[1])
BALT <- as.data.frame(predict_obs_Eq123("BALT")[1])
NORW <- as.data.frame(predict_obs_Eq123("NORW")[1])
all_obs_predict <- rbind(WBL, BH, GOM, BALT, NORW)
options(knitr.kable.NA = NA)
kable(all_obs_predict,digits = 3)
ggplot(all_obs_predict, aes(x = Ptros_obs, y = Ptros_Eq3, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom") + labs(x = "Ptros Observed", y = "Ptros predicted by Eq3")
ggplot(all_obs_predict, aes(x = P_MT_T_obs, y = P_MT_T_Eq1, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom") + labs(x = "P(tros|T) Observed", y = "P(tros|T) predicted by Eq1")
ggplot(all_obs_predict, aes(x = P_ME_E_obs, y = P_ME_E_Eq2, shape = Set)) + geom_point(size = 4) + geom_abline() + theme(legend.position = "bottom") + labs(x = "P(edu|E) Observed", y = "P(edu|E) predicted by Eq2")
